var App;(()=>{var e={747:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(){return o="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=i(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},o.apply(this,arguments)}function i(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&u(e,t)}function u(e,t){return u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},u(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=f(e);if(t){var o=f(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return c(this,r)}}function c(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return l(e)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function p(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return h(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?h(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function y(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}r.d(t,{Dd:()=>T,Gr:()=>Q,iC:()=>x});var v=y((function e(){b(this,e)})),m=function(){function e(t){b(this,e),this.webixJet=!0,this.webix=t,this._events=[],this._subs={},this._data={}}return y(e,[{key:"getRoot",value:function(){return this._root}},{key:"destructor",value:function(){this._detachEvents(),this._destroySubs(),this._events=this._container=this.app=this._parent=this._root=null}},{key:"setParam",value:function(e,t,r){if(this._data[e]!==t&&(this._data[e]=t,this._segment.update(e,t,0),r))return this.show(null)}},{key:"getParam",value:function(e,t){var r=this._data[e];if(void 0!==r||!t)return r;var n=this.getParentView();return n?n.getParam(e,t):void 0}},{key:"getUrl",value:function(){return this._segment.suburl()}},{key:"getUrlString",value:function(){return this._segment.toString()}},{key:"getParentView",value:function(){return this._parent}},{key:"$$",value:function(e){if("string"==typeof e){var t=this.getRoot();return t.queryView((function(r){return(r.config.id===e||r.config.localId===e)&&r.$scope===t.$scope}),"self")}return e}},{key:"on",value:function(e,t,r){var n=e.attachEvent(t,r);return this._events.push({obj:e,id:n}),n}},{key:"contains",value:function(e){for(var t in this._subs){var r=this._subs[t].view;if(r===e||r.contains(e))return!0}return!1}},{key:"getSubView",value:function(e){var t=this.getSubViewInfo(e);if(t)return t.subview.view}},{key:"getSubViewInfo",value:function(e){var t=this._subs[e||"default"];return t?{subview:t,parent:this}:"_top"===e?(this._subs[e]={url:"",id:null,popup:!0},this.getSubViewInfo(e)):this._parent?this._parent.getSubViewInfo(e):null}},{key:"_detachEvents",value:function(){for(var e=this._events,t=e.length-1;t>=0;t--)e[t].obj.detachEvent(e[t].id)}},{key:"_destroySubs",value:function(){for(var e in this._subs){var t=this._subs[e].view;t&&t.destructor()}this._subs={}}},{key:"_init_url_data",value:function(){var e=this._segment.current();this._data={},this.webix.extend(this._data,e.params,!0)}},{key:"_getDefaultSub",value:function(){if(this._subs.default)return this._subs.default;for(var e in this._subs){var t=this._subs[e];if(!t.branch&&t.view&&"_top"!==e){var r=t.view._getDefaultSub();if(r)return r}}}},{key:"_routed_view",value:function(){var e=this.getParentView();if(!e)return!0;var t=e._getDefaultSub();return!(!t&&t!==this)&&e._routed_view()}}]),e}();function g(e){"/"===e[0]&&(e=e.substr(1));for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var o=t[n],i={},a=o.indexOf(":");if(-1===a&&(a=o.indexOf("?")),-1!==a){var u,s=p(o.substr(a+1).split(/[\:\?\&]/g));try{for(s.s();!(u=s.n()).done;){var c=u.value.split("=");i[c[0]]=decodeURIComponent(c[1])}}catch(e){s.e(e)}finally{s.f()}}r[n]={page:a>-1?o.substr(0,a):o,params:i,isNew:!0}}return r}function w(e){var t,r=[],n=p(e);try{for(n.s();!(t=n.n()).done;){var o=t.value;r.push("/"+o.page);var i=_(o.params);i&&r.push("?"+i)}}catch(e){n.e(e)}finally{n.f()}return r.join("")}function _(e){var t=[];for(var r in e)t.length&&t.push("&"),t.push(r+"="+encodeURIComponent(e[r]));return t.join("")}var k=function(){function e(t,r){b(this,e),this._next=1,this.route="string"==typeof t?{url:g(t),path:t}:t,this.index=r}return y(e,[{key:"current",value:function(){return this.route.url[this.index]}},{key:"next",value:function(){return this.route.url[this.index+this._next]}},{key:"suburl",value:function(){return this.route.url.slice(this.index)}},{key:"shift",value:function(){return new e(this.route,this.index+this._next)}},{key:"refresh",value:function(){for(var e=this.route.url,t=this.index+1;t<e.length;t++)e[t].isNew=!0}},{key:"toString",value:function(){var e=w(this.suburl());return e?e.substr(1):""}},{key:"_join",value:function(e,t){var r=this.route.url;if(null===e)return r;var n=this.route.url;if(r=n.slice(0,this.index+(t?this._next:0)),e){r=r.concat(g(e));for(var o=0;o<r.length;o++)n[o]&&(r[o].view=n[o].view),n[o]&&r[o].page===n[o].page&&(r[o].isNew=!1)}return r}},{key:"append",value:function(e){var t=this._join(e,!0);return this.route.path=w(t),this.route.url=t,this.route.path}},{key:"show",value:function(e,t,r){var n=this,o=this._join(e,r);return new Promise((function(e,r){var i=w(o),a={url:o,redirect:i,confirm:Promise.resolve()},u=t?t.app:null;!u||u.callEvent("app:guard",[a.redirect,t,a])?a.confirm.catch((function(e){return r(e)})).then((function(){if(null!==a.redirect){if(a.redirect!==i)return u.show(a.redirect),void r(new v);n.route.path=i,n.route.url=o,e()}else r(new v)})):r(new v)}))}},{key:"size",value:function(e){this._next=e}},{key:"split",value:function(){var t={url:this.route.url.slice(this.index+1),path:""};return t.url.length&&(t.path=w(t.url)),new e(t,0)}},{key:"update",value:function(e,t,r){var n=this.route.url[this.index+(r||0)];if(!n)return this.route.url.push({page:"",params:{}}),this.update(e,t,r);""===e?n.page=t:n.params[e]=t,this.route.path=w(this.route.url)}}]),e}(),x=function(e){a(r,e);var t=s(r);function r(e,n){var o;return b(this,r),(o=t.call(this,e.webix)).app=e,o._children=[],o}return y(r,[{key:"ui",value:function(e,t){var r=(t=t||{}).container||e.container,o=this.app.createView(e);return this._children.push(o),o.render(r,this._segment,this),"object"!==n(e)||e instanceof m?o:o.getRoot()}},{key:"show",value:function(e,t){if(t=t||{},"object"===n(e)){for(var r in e)this.setParam(r,e[r]);e=null}else{if("/"===e.substr(0,1))return this.app.show(e);if(0===e.indexOf("./")&&(e=e.substr(2)),0===e.indexOf("../")){var o=this.getParentView();return o?o.show(e.substr(3),t):this.app.show("/"+e.substr(3))}var i=this.getSubViewInfo(t.target);if(i){if(i.parent!==this)return i.parent.show(e,t);if(t.target&&"default"!==t.target)return this._renderFrameLock(t.target,i.subview,e)}else if(e)return this.app.show("/"+e)}return this._show(this._segment,e,this)}},{key:"_show",value:function(e,t,r){var n=this;return e.show(t,r,!0).then((function(){return n._init_url_data(),n._urlChange()})).then((function(){e.route.linkRouter&&(n.app.getRouter().set(e.route.path,{silent:!0}),n.app.callEvent("app:route",[e.route.path]))}))}},{key:"init",value:function(e,t){}},{key:"ready",value:function(e,t){}},{key:"config",value:function(){this.app.webix.message("View:Config is not implemented")}},{key:"urlChange",value:function(e,t){}},{key:"destroy",value:function(){}},{key:"destructor",value:function(){this.destroy(),this._destroyKids(),this._root.destructor(),o(f(r.prototype),"destructor",this).call(this)}},{key:"use",value:function(e,t){e(this.app,this,t)}},{key:"refresh",value:function(){return this.getUrl(),this.destroy(),this._destroyKids(),this._destroySubs(),this._detachEvents(),this._container.tagName&&this._root.destructor(),this._segment.refresh(),this._render(this._segment)}},{key:"render",value:function(e,t,r){var n=this;"string"==typeof t&&(t=new k(t,0)),this._segment=t,this._parent=r,this._init_url_data();var o="string"==typeof(e=e||document.body)?this.webix.toNode(e):e;return this._container!==o?(this._container=o,this._render(t)):this._urlChange().then((function(){return n.getRoot()}))}},{key:"_render",value:function(e){var t=this,r=this.config();return r.then?r.then((function(r){return t._render_final(r,e)})):this._render_final(r,e)}},{key:"_render_final",value:function(e,t){var r,n=this,o=null,i=null,a=!1;if(this._container.tagName?i=this._container:(o=this._container).popup?(i=document.body,a=!0):i=this.webix.$$(o.id),!this.app||!i)return Promise.reject(null);var u=this._segment.current(),s={ui:{}};this.app.copyConfig(e,s.ui,this._subs),this.app.callEvent("app:render",[this,t,s]),s.ui.$scope=this,!o&&u.isNew&&u.view&&u.view.destructor();try{if(o&&!a){var c=i,l=c.getParentView();l&&"multiview"===l.name&&!s.ui.id&&(s.ui.id=c.config.id)}this._root=this.app.webix.ui(s.ui,i);var f=this._root;a&&f.setPosition&&!f.isVisible()&&f.show(),o&&(o.view&&o.view!==this&&o.view!==this.app&&o.view.destructor(),o.id=this._root.config.id,this.getParentView()||!this.app.app?o.view=this:o.view=this.app),u.isNew&&(u.view=this,u.isNew=!1),r=Promise.resolve(this._init(this._root,t)).then((function(){return n._urlChange().then((function(){return n._initUrl=null,n.ready(n._root,t.suburl())}))}))}catch(e){r=Promise.reject(e)}return r.catch((function(e){return n._initError(n,e)}))}},{key:"_init",value:function(e,t){return this.init(e,t.suburl())}},{key:"_urlChange",value:function(){var e=this;this.app.callEvent("app:urlchange",[this,this._segment]);var t=[];for(var r in this._subs){var n=this._subs[r],o=this._renderFrameLock(r,n,null);o&&t.push(o)}return Promise.all(t).then((function(){return e.urlChange(e._root,e._segment.suburl())}))}},{key:"_renderFrameLock",value:function(e,t,r){if(!t.lock){var n=this._renderFrame(e,t,r);n&&(t.lock=n.then((function(){return t.lock=null}),(function(){return t.lock=null})))}return t.lock}},{key:"_renderFrame",value:function(e,t,r){var n=this;if("default"===e){if(this._segment.next())return this._createSubView(t,this._segment.shift());t.view&&t.popup&&(t.view.destructor(),t.view=null)}if(null!==r&&(t.url=r),t.route){if(null!==r)return t.route.show(r,t.view).then((function(){return n._createSubView(t,t.route)}));if(t.branch)return}var o=t.view;if(!o&&t.url){if("string"==typeof t.url)return t.route=new k(t.url,0),this._createSubView(t,t.route);"function"!=typeof t.url||o instanceof t.url||(o=new t.url(this.app,"")),o||(o=t.url)}if(o)return o.render(t,t.route||this._segment,this)}},{key:"_initError",value:function(e,t){return this.app&&this.app.error("app:error:initview",[t,e]),!0}},{key:"_createSubView",value:function(e,t){var r=this;return this.app.createFromURL(t.current()).then((function(n){return n.render(e,t,r)}))}},{key:"_destroyKids",value:function(){for(var e=this._children,t=e.length-1;t>=0;t--)e[t]&&e[t].destructor&&e[t].destructor();this._children=[]}}]),r}(m),O=function(e){a(r,e);var t=s(r);function r(e,n){var o;return b(this,r),(o=t.call(this,e,n))._ui=n.ui,o}return y(r,[{key:"config",value:function(){return this._ui}}]),r}(x),S=function(){function e(t,r,n){b(this,e),this.path="",this.app=n}return y(e,[{key:"set",value:function(e,t){this.path=e;var r=this.app;r.app.getRouter().set(r._segment.append(this.path),{silent:!0})}},{key:"get",value:function(){return this.path}}]),e}(),j=!0,P=function(e){a(r,e);var t=s(r);function r(e){var n;b(this,r);var o=(e||{}).webix||window.webix;return(n=t.call(this,o)).config=n.webix.extend({name:"App",version:"1.0",start:"/home"},e,!0),n.app=n.config.app,n.ready=Promise.resolve(),n._services={},n.webix.extend(l(n),n.webix.EventSystem),n}return y(r,[{key:"getUrl",value:function(){return this._subSegment.suburl()}},{key:"getUrlString",value:function(){return this._subSegment.toString()}},{key:"getService",value:function(e){var t=this._services[e];return"function"==typeof t&&(t=this._services[e]=t(this)),t}},{key:"setService",value:function(e,t){this._services[e]=t}},{key:"destructor",value:function(){this.getSubView().destructor(),o(f(r.prototype),"destructor",this).call(this)}},{key:"copyConfig",value:function(e,t,r){if((e instanceof m||"function"==typeof e&&e.prototype instanceof m)&&(e={$subview:e}),void 0!==e.$subview)return this.addSubView(e,t,r);for(var o in t=t||(e instanceof Array?[]:{}),e){var i=e[o];if("function"==typeof i&&i.prototype instanceof m&&(i={$subview:i}),!i||"object"!==n(i)||i instanceof this.webix.DataCollection||i instanceof RegExp||i instanceof Map)t[o]=i;else if(i instanceof Date)t[o]=new Date(i);else{var a=this.copyConfig(i,i instanceof Array?[]:{},r);null!==a&&(t[o]=a)}}return t}},{key:"getRouter",value:function(){return this.$router}},{key:"clickHandler",value:function(e,t){if(e&&(t=t||e.target||e.srcElement)&&t.getAttribute){var r=t.getAttribute("trigger");if(r)return this._forView(t,(function(e){return e.app.trigger(r)})),e.cancelBubble=!0,e.preventDefault();var n=t.getAttribute("route");if(n)return this._forView(t,(function(e){return e.show(n)})),e.cancelBubble=!0,e.preventDefault()}var o=t.parentNode;o&&this.clickHandler(e,o)}},{key:"getRoot",value:function(){return this.getSubView().getRoot()}},{key:"refresh",value:function(){var e=this;return this._subSegment?this.getSubView().refresh().then((function(t){return e.callEvent("app:route",[e.getUrl()]),t})):Promise.resolve(null)}},{key:"loadView",value:function(e){var t=this,r=this.config.views,n=null;if(""===e)return Promise.resolve(this._loadError("",new Error("Webix Jet: Empty url segment")));try{r&&"string"==typeof(n="function"==typeof r?r(e):r[e])&&(e=n,n=null),n||(n="_blank"===e?{}:this._loadViewDynamic(e))}catch(t){n=this._loadError(e,t)}return n.then||(n=Promise.resolve(n)),n.then((function(e){return e.__esModule?e.default:e})).catch((function(r){return t._loadError(e,r)}))}},{key:"_forView",value:function(e,t){var r=this.webix.$$(e);r&&t(r.$scope)}},{key:"_loadViewDynamic",value:function(e){return null}},{key:"createFromURL",value:function(e){var t=this;return e.isNew||!e.view?this.loadView(e.page).then((function(e){return t.createView(e,name)})):Promise.resolve(e.view)}},{key:"createView",value:function(e,t){if("function"==typeof e){if(e.prototype instanceof r)return new e({app:this,name:t,router:S});if(e.prototype instanceof m)return new e(this,{name:t});e=e(this)}return e instanceof m?e:new O(this,{name:t,ui:e})}},{key:"show",value:function(e){return this.render(this._container,e||this.config.start)}},{key:"trigger",value:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this.apply(e,r)}},{key:"apply",value:function(e,t){this.callEvent(e,t)}},{key:"action",value:function(e){return this.webix.bind((function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];this.apply(e,r)}),this)}},{key:"on",value:function(e,t){this.attachEvent(e,t)}},{key:"use",value:function(e,t){e(this,null,t)}},{key:"error",value:function(e,t){if(this.callEvent(e,t),this.callEvent("app:error",t),this.config.debug)for(var r=0;r<t.length;r++)if(console.error(t[r]),t[r]instanceof Error){var n=t[r].message;0===n.indexOf("Module build failed")?(n=n.replace(/\x1b\[[0-9;]*m/g,""),document.body.innerHTML="<pre style='font-size:16px; background-color: #ec6873; color: #000; padding:10px;'>".concat(n,"</pre>")):(n+="<br><br>Check console for more details",this.webix.message({type:"error",text:n,expire:-1}))}}},{key:"render",value:function(e,t,r){var n=this;this._container="string"==typeof e?this.webix.toNode(e):e||document.body;var o=null;this.$router?o="string"==typeof t?t:this.app?t.split().route.path||this.config.start:t.toString():(j&&"tagName"in this._container&&(this.webix.event(document.body,"click",(function(e){return n.clickHandler(e)})),j=!1),"string"==typeof t&&(t=new k(t,0)),this._subSegment=this._first_start(t),this._subSegment.route.linkRouter=!0);var i=this.getSubView(),a=this._subSegment,u=a.show(o,i).then((function(){return n.createFromURL(a.current())})).then((function(t){return t.render(e,a)})).then((function(e){return n.$router.set(a.route.path,{silent:!0}),n.callEvent("app:route",[n.getUrl()]),e}));return this.ready=this.ready.then((function(){return u})),u}},{key:"getSubView",value:function(){if(this._subSegment){var e=this._subSegment.current().view;if(e)return e}return new x(this,{})}},{key:"_first_start",value:function(e){var t=this;if(this._segment=e,this.$router=new this.config.router((function(e){return setTimeout((function(){t.show(e).catch((function(e){if(!(e instanceof v))throw e}))}),1)}),this.config,this),this._container===document.body&&!1!==this.config.animation){var r=this._container;this.webix.html.addCss(r,"webixappstart"),setTimeout((function(){t.webix.html.removeCss(r,"webixappstart"),t.webix.html.addCss(r,"webixapp")}),10)}if(e)this.app&&(e.current().view=this,e.next()?(e.refresh(),e=e.split()):e=new k(this.config.start,0));else{var n=this.$router.get();n||(n=this.config.start,this.$router.set(n,{silent:!0})),e=new k(n,0)}return e}},{key:"_loadError",value:function(e,t){return this.error("app:error:resolve",[t,e]),{template:" "}}},{key:"addSubView",value:function(e,t,r){var n=!0!==e.$subview?e.$subview:null,o=e.name||(n?this.webix.uid():"default");return t.id=e.id||"s"+this.webix.uid(),(r[o]={id:t.id,url:n,branch:e.branch,popup:e.popup}).popup?null:t}}]),r}(m),R=function(){function e(t,r){var n=this;b(this,e),this.config=r||{},this._detectPrefix(),this.cb=t,window.onpopstate=function(){return n.cb(n.get())}}return y(e,[{key:"set",value:function(e,t){var r=this;if(this.config.routes){var n=e.split("?",2);for(var o in this.config.routes)if(this.config.routes[o]===n[0]){e=o+(n.length>1?"?"+n[1]:"");break}}this.get()!==e&&window.history.pushState(null,null,this.prefix+this.sufix+e),t&&t.silent||setTimeout((function(){return r.cb(e)}),1)}},{key:"get",value:function(){var e=this._getRaw().replace(this.prefix,"").replace(this.sufix,"");if(e="/"!==e&&"#"!==e?e:"",this.config.routes){var t=e.split("?",2),r=this.config.routes[t[0]];r&&(e=r+(t.length>1?"?"+t[1]:""))}return e}},{key:"_detectPrefix",value:function(){var e=this.config.routerPrefix;this.sufix="#"+(void 0===e?"!":e),this.prefix=document.location.href.split("#",2)[0]}},{key:"_getRaw",value:function(){return document.location.href}}]),e}(),E=!1;function $(e){if(!E&&e){E=!0;var t=window;t.Promise||(t.Promise=e.promise);var r=e.version.split(".");10*r[0]+1*r[1]<53&&(e.ui.freeze=function(t){var r=t();return r&&r.then?r.then((function(t){return e.ui.$freeze=!1,e.ui.resize(),t})):(e.ui.$freeze=!1,e.ui.resize()),r});var o=e.ui.baselayout.prototype.addView,i=e.ui.baselayout.prototype.removeView,a={addView:function(e,t){var r=this;if(!this.$scope||!this.$scope.webixJet||e.queryView)return o.apply(this,arguments);var i=function(){var n=r.$scope,i={};e=n.app.copyConfig(e,{},i),o.apply(r,[e,t]);var a=function(e){n._renderFrame(e,i[e],null).then((function(){n._subs[e]=i[e]}))};for(var u in i)a(u);return{v:e.id}}();return"object"===n(i)?i.v:void 0},removeView:function(){if(i.apply(this,arguments),this.$scope&&this.$scope.webixJet){var t=this.$scope._subs;for(var r in t){var n=t[r];e.$$(n.id)||(n.view.destructor(),delete t[r])}}}};e.extend(e.ui.layout.prototype,a,!0),e.extend(e.ui.baselayout.prototype,a,!0),e.protoUI({name:"jetapp",$init:function(t){this.$app=new this.app(t);var r=e.uid().toString();for(var n in t.body={id:r},this.$ready.push((function(){this.$app.render({id:r})})),this.$app){var o=this.$app[n];"function"!=typeof o||this[n]||(this[n]=o.bind(this.$app))}}},e.ui.proxy)}}var T=function(e){a(n,e);var t=s(n);function n(e){var r;return b(this,n),e.router=e.router||R,$((r=t.call(this,e)).webix),r}return y(n,[{key:"_loadViewDynamic",value:function(e){return e=e.replace(/\./g,"/"),r(403)("./"+e)}}]),n}(P);function C(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function D(e,t,r){for(var n in e)C(e,n)&&t.call(r||e,e[n],n,e)}function I(e){e="Warning: "+e,"undefined"!=typeof console&&console.error(e);try{throw new Error(e)}catch(e){}}var N=String.prototype.replace,V=String.prototype.split,M="||||",B=function(e){var t=e%10;return 11!==e&&1===t?0:2<=t&&t<=4&&!(e>=12&&e<=14)?1:2},U={arabic:function(e){if(e<3)return e;var t=e%100;return t>=3&&t<=10?3:t>=11?4:5},bosnian_serbian:B,chinese:function(){return 0},croatian:B,french:function(e){return e>1?1:0},german:function(e){return 1!==e?1:0},russian:B,lithuanian:function(e){return e%10==1&&e%100!=11?0:e%10>=2&&e%10<=9&&(e%100<11||e%100>19)?1:2},czech:function(e){return 1===e?0:e>=2&&e<=4?1:2},polish:function(e){if(1===e)return 0;var t=e%10;return 2<=t&&t<=4&&(e%100<10||e%100>=20)?1:2},icelandic:function(e){return e%10!=1||e%100==11?1:0},slovenian:function(e){var t=e%100;return 1===t?0:2===t?1:3===t||4===t?2:3}},A={arabic:["ar"],bosnian_serbian:["bs-Latn-BA","bs-Cyrl-BA","srl-RS","sr-RS"],chinese:["id","id-ID","ja","ko","ko-KR","lo","ms","th","th-TH","zh"],croatian:["hr","hr-HR"],german:["fa","da","de","en","es","fi","el","he","hi-IN","hu","hu-HU","it","nl","no","pt","sv","tr"],french:["fr","tl","pt-br"],russian:["ru","ru-RU"],lithuanian:["lt"],czech:["cs","cs-CZ","sk"],polish:["pl"],icelandic:["is"],slovenian:["sl-SL"]};function z(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}var L=/\$/g,F=/%\{(.*?)\}/g;function W(e,t,r,n){if("string"!=typeof e)throw new TypeError("Polyglot.transformPhrase expects argument #1 to be string");if(null==t)return e;var o,i=e,a=n||F,u="number"==typeof t?{smart_count:t}:t;if(null!=u.smart_count&&i){var s=V.call(i,M);o=s[function(e,t){return U[function(e){var t,r=(t={},D(A,(function(e,r){D(e,(function(e){t[e]=r}))})),t);return r[e]||r[V.call(e,/-/,1)[0]]||r.en}(e)](t)}(r||"en",u.smart_count)]||s[0],i=o.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}return N.call(i,a,(function(e,t){return C(u,t)&&null!=u[t]?N.call(u[t],L,"$$"):e}))}function K(e){var t=e||{};this.phrases={},this.extend(t.phrases||{}),this.currentLocale=t.locale||"en";var r=t.allowMissing?W:null;this.onMissingKey="function"==typeof t.onMissingKey?t.onMissingKey:r,this.warn=t.warn||I,this.tokenRegex=function(e){var t=e&&e.prefix||"%{",r=e&&e.suffix||"}";if(t===M||r===M)throw new RangeError('"||||" token is reserved for pluralization');return new RegExp(z(t)+"(.*?)"+z(r),"g")}(t.interpolation)}K.prototype.locale=function(e){return e&&(this.currentLocale=e),this.currentLocale},K.prototype.extend=function(e,t){D(e,(function(e,r){var o=t?t+"."+r:r;"object"===n(e)?this.extend(e,o):this.phrases[o]=e}),this)},K.prototype.unset=function(e,t){"string"==typeof e?delete this.phrases[e]:D(e,(function(e,r){var o=t?t+"."+r:r;"object"===n(e)?this.unset(e,o):delete this.phrases[o]}),this)},K.prototype.clear=function(){this.phrases={}},K.prototype.replace=function(e){this.clear(),this.extend(e)},K.prototype.t=function(e,t){var r,n,o=null==t?{}:t;return"string"==typeof this.phrases[e]?r=this.phrases[e]:"string"==typeof o._?r=o._:this.onMissingKey?n=(0,this.onMissingKey)(e,o,this.currentLocale,this.tokenRegex):(this.warn('Missing translation for key: "'+e+'"'),n=e),"string"==typeof r&&(n=W(r,o,this.currentLocale,this.tokenRegex)),n},K.prototype.has=function(e){return C(this.phrases,e)},K.transformPhrase=function(e,t,r){return W(e,t,r)};var J=K;function H(e,t,r){t.urls?r=t.urls[r]||r:t.param&&(r=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}({},t.param,r)),e.show(r)}var G={good:"check",error:"warning",saving:"refresh fa-spin"},Y={good:"Ok",error:"Error",saving:"Connecting..."};function q(e,t,r){for(var n=0;n<r.length;n++)e[r[n]]=t[n+1]?t[n+1].page:""}var Z=window.webix;Z&&$(Z);var Q={UnloadGuard:function(e,t,r){t.on(e,"app:guard",(function(e,n,o){if(n===t||n.contains(t)){var i=r();o.confirm=!1===i?Promise.reject(new v):o.confirm.then((function(){return i}))}}))},Locale:function(e,t,n){var o=(n=n||{}).storage,i=o?o.get("lang")||"en":n.lang||"en";function a(t,r,a){r.__esModule&&(r=r.default);var u={phrases:r};n.polyglot&&e.webix.extend(u,n.polyglot);var c=s.polyglot=new J(u);if(c.locale(t),s._=e.webix.bind(c.t,c),i=t,o&&o.put("lang",i),n.webix){var l=n.webix[t];l&&e.webix.i18n.setLocale(l)}return a?Promise.resolve():e.refresh()}function u(e,t){if(!1!==n.path){var o=(n.path?n.path+"/":"")+e;a(e,r(796)("./"+o),t)}}var s={getLang:function(){return i},setLang:u,setLangData:a,_:null,polyglot:null};e.setService("locale",s),u(i,!0)},Menu:function(e,t,r){var n=t.getSubViewInfo().parent,o=t.$$(r.id||r),i=!1;o.attachEvent("onchange",(function(){i||H(n,r,this.getValue())})),o.attachEvent("onafterselect",(function(){if(!i){var e=null;o.setValue?e=this.getValue():o.getSelectedId&&(e=o.getSelectedId()),H(n,r,e)}})),t.on(e,"app:route",(function(){var e="";if(r.param)e=t.getParam(r.param,!0);else{var a=n.getUrl()[1];a&&(e=a.page)}e&&(i=!0,o.setValue&&o.getValue()!==e?o.setValue(e):o.select&&o.exists(e)&&o.getSelectedId()!==e&&o.select(e),i=!1)}))},Theme:function(e,t,r){var n=(r=r||{}).storage,o=n?n.get("theme")||"flat-default":r.theme||"flat-default",i={getTheme:function(){return o},setTheme:function(t,r){for(var i=t.split("-"),a=document.getElementsByTagName("link"),u=0;u<a.length;u++){var s=a[u].getAttribute("title");s&&(s===t||s===i[0]?a[u].disabled=!1:a[u].disabled=!0)}e.webix.skin.set(i[0]),e.webix.html.removeCss(document.body,"theme-"+o),e.webix.html.addCss(document.body,"theme-"+t),o=t,n&&n.put("theme",t),r||e.refresh()}};e.setService("theme",i),i.setTheme(o,!0)},User:function(e,t,r){var n=(r=r||{}).login||"/login",o=r.logout||"/logout",i=r.afterLogin||e.config.start,a=r.afterLogout||"/login",u=r.ping||3e5,s=r.model,c=r.user,l={getUser:function(){return c},getStatus:function(e){return e?s.status().catch((function(){return null})).then((function(e){c=e})):null!==c},login:function(t,r){return s.login(t,r).then((function(t){if(c=t,!t)throw new Error("Access denied");e.callEvent("app:user:login",[c]),e.show(i)}))},logout:function(){return c=null,s.logout().then((function(t){return e.callEvent("app:user:logout",[]),t}))}};function f(e,t){e===o?(l.logout(),t.redirect=a):e===n||l.getStatus()||(t.redirect=n)}e.setService("user",l),e.attachEvent("app:guard",(function(e,t,n){return!(!r.public||!r.public(e))||(void 0===c&&(n.confirm=l.getStatus(!0).then((function(){return f(e,n)}))),f(e,n))})),u&&setInterval((function(){return l.getStatus(!0)}),u)},Status:function(e,t,r){var n="good",o=0,i=!1,a=r.expire;a||!1===a||(a=2e3);var u=r.texts||Y,s=r.icons||G;function c(e){var o=t.$$(r.target);o&&(e||(e="<div class='status_"+n+"'><span class='webix_icon fa-"+s[n]+"'></span> "+u[n]+"</div>"),o.setHTML(e))}function l(){o--,d("good")}function f(e){o--,d("error",e)}function p(e){o++,d("saving"),e&&e.then&&e.then(l,f)}function h(){0===o&&c(" ")}function d(t,r){o<0&&(o=0),"saving"===t?(n="saving",c()):(i="error"===t,0===o&&(n=i?"error":"good",i?e.error("app:error:server",[r.responseText||r]):a&&setTimeout(h,a),c()))}function y(r){var n=e.webix.dp(r);n&&(t.on(n,"onAfterDataSend",p),t.on(n,"onAfterSaveError",(function(e,t,r){return f(r)})),t.on(n,"onAfterSave",l))}"string"==typeof r&&(r={target:r}),e.setService("status",{getStatus:function(){return n},setStatus:d,track:y}),r.remote&&t.on(e.webix,"onRemoteCall",p),r.ajax&&t.on(e.webix,"onBeforeAjax",(function(e,t,r,n,o,i,a){p(a)})),r.data&&y(r.data)},UrlParam:function(e,t,r){var n=r.route||r,o={};t.on(e,"app:urlchange",(function(e,r){t===e&&(q(o,r.suburl(),n),r.size(n.length+1))}));var i=t.setParam,a=t.getParam;t.setParam=function(e,r,a){var u=n.indexOf(e);return u>=0?(o[e]=r,this._segment.update("",r,u+1),a?t.show(null):void 0):i.call(this,e,r,a)},t.getParam=function(e,t){var r=o[e];return void 0!==r?r:a.call(this,e,t)},q(o,t.getUrl(),n)}},X=window;X.Promise||(X.Promise=X.webix.promise)},956:(e,t,r)=>{"use strict";function n(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,n=t?1e3:1024;if(Math.abs(e)<n)return e+" B";var o=t?["kB","MB","GB","TB","PB","EB","ZB","YB"]:["KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],i=-1,a=Math.pow(10,r);do{e/=n,++i}while(Math.round(Math.abs(e)*a)/a>=n&&i<o.length-1);return e.toFixed(r)+" "+o[i]}r.d(t,{W:()=>n})},502:()=>{},542:(e,t,r)=>{"use strict";function n(e){for(var t=webix.copy(e||o),r=t.length-1;r>0;r--){var n=Math.floor(Math.random()*(r+1)),i=[t[n],t[r]];t[r]=i[0],t[n]=i[1]}return t}r.d(t,{T:()=>n,x:()=>i});var o=[{id:1,year:1,a:10,b:50},{id:2,year:2,a:15,b:60},{id:3,year:3,a:7,b:53},{id:4,year:4,a:13,b:70},{id:5,year:5,a:16,b:67},{id:6,year:6,a:9,b:56},{id:7,year:7,a:9,b:60},{id:8,year:8,a:12,b:67},{id:9,year:9,a:16,b:70},{id:10,year:10,a:20,b:75},{id:11,year:11,a:17,b:70},{id:12,year:12,a:29,b:89},{id:13,year:13,a:33,b:94},{id:14,year:14,a:40,b:91},{id:15,year:15,a:35,b:85},{id:16,year:16,a:33,b:80},{id:17,year:17,a:45,b:73},{id:18,year:18,a:56,b:78},{id:19,year:19,a:58,b:81},{id:20,year:20,a:45,b:76},{id:21,year:21,a:23,b:65},{id:22,year:22,a:43,b:67},{id:23,year:23,a:56,b:73},{id:24,year:24,a:34,b:64},{id:25,year:25,a:56,b:69},{id:26,year:26,a:34,b:56},{id:27,year:27,a:30,b:51},{id:28,year:28,a:34,b:59},{id:29,year:29,a:56,b:63},{id:30,year:30,a:60,b:69},{id:31,year:31,a:64,b:76},{id:32,year:32,a:70,b:80}];function i(){return o}},743:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){return a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},a(e,t)}function u(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function s(e){return s=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},s(e)}function c(){this.config.icon="wxi-close"==this.config.icon?"mdi mdi-magnify":"wxi-close";var e=this.$scope.$$("srch:field");e.isVisible()?e.hide():e.show();var t=this.$scope.$$("header");t.isVisible()?t.hide():t.show(),this.refresh()}r.r(t),r.d(t,{default:()=>l});var l=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&a(e,t)}(p,e);var t,r,n,l,f=(n=p,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=s(n);if(l){var r=s(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return u(this,e)});function p(){return o(this,p),f.apply(this,arguments)}return t=p,(r=[{key:"config",value:function(){var e=this;return{width:387,rows:[{type:"toolbar",height:48,padding:{right:8},cols:[{template:"Exchange rates",type:"header",borderless:!0,localId:"header"},{view:"text",localId:"srch:field",placeholder:"Type to search",hidden:!0,on:{onViewShow:function(){var e=this;webix.delay((function(){e.focus()}))},onTimedKeyPress:function(){var e=this.getValue().toLowerCase();this.$scope.$$("currencies").filter((function(t){return-1!==t.name.indexOf(e)}))}}},{view:"icon",icon:"mdi mdi-magnify",click:c}]},{view:"list",localId:"currencies",css:"currencies_list",select:!0,yCount:4,type:{height:64,template:function(e){var t=parseFloat(e.delta)>0?"green":"red";return"\n\t\t\t\t\t\t\t\t<span class='icon' style='background-color:".concat(e.color,";color:#ffffff'>").concat(e.icon,"</span>\n\t\t\t\t\t\t\t\t<span class='value'>$").concat(e.value,"</span>\n\t\t\t\t\t\t\t\t<span class='delta ").concat(t,"'>").concat(e.delta,"</span>")}},on:{onItemClick:function(t){e.app.callEvent("currency:select",[t])}}}]}}},{key:"init",value:function(){this.$$("currencies").parse([{name:"euro",icon:"€",value:321.12,delta:"-0.2",color:"#1CA1C1"},{name:"dollar",icon:"$",value:345.76,delta:"+0.2",color:"#55CD97"},{name:"yen",icon:"¥",value:567.26,delta:"+0.3",color:"#FDBF4C"},{name:"pound",icon:"£",value:234.64,delta:"-0.1",color:"#FF5C4C"}]),this.$$("currencies").select(this.$$("currencies").getFirstId())}}])&&i(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),p}(r(747).iC)},573:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){return a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},a(e,t)}function u(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function s(e){return s=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},s(e)}r.r(t),r.d(t,{default:()=>c});var c=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&a(e,t)}(f,e);var t,r,n,c,l=(n=f,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=s(n);if(c){var r=s(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return u(this,e)});function f(){return o(this,f),l.apply(this,arguments)}return t=f,(r=[{key:"config",value:function(){return{type:"space",rows:[{type:"wide",cols:[{$subview:"dash.currencies"},{$subview:"dash.progress"}]},{type:"wide",cols:[{$subview:"dash.reviews"},{type:"wide",rows:[{$subview:"dash.stats"},{$subview:"dash.projects"}]}]}]}}}])&&i(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),f}(r(747).iC)},273:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>p});var n=r(747),o=r(542);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function c(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function f(){this.config.icon="wxi-close"==this.config.icon?"mdi mdi-magnify":"wxi-close";var e=this.$scope.$$("srch:field");e.isVisible()?e.hide():e.show();var t=this.$scope.$$("header");t.isVisible()?t.hide():t.show(),this.refresh()}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(h,e);var t,r,n,i,p=(n=h,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(n);if(i){var r=l(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return c(this,e)});function h(){return a(this,h),p.apply(this,arguments)}return t=h,(r=[{key:"config",value:function(){return{rows:[{type:"toolbar",height:48,padding:{right:8},cols:[{template:"2018 year stats",type:"header",borderless:!0,localId:"header"},{view:"text",localId:"srch:field",placeholder:"Type to filter values above (e.g. 30)",hidden:!0,on:{onViewShow:function(){var e=this;webix.delay((function(){e.focus()}))},onTimedKeyPress:function(){var e=parseInt(this.getValue());isNaN(e)?this.$scope.$$("chart").filter():this.$scope.$$("chart").filter((function(t){return t.a>e}))}}},{view:"icon",icon:"mdi mdi-magnify",click:f}]},{view:"chart",type:"stackedBar",localId:"chart",yAxis:{template:"",lineColor:"#fff",color:"#fff"},xAxis:{lineColor:"#fff",color:"#fff",template:""},series:[{value:"#a#",color:"#1CA1C1",tooltip:{template:"#a#"}},{value:"#b#",color:"#EBEDF0",tooltip:{template:"#b#"}}],padding:{left:30,bottom:30},barWidth:24}]}}},{key:"init",value:function(){var e=this;this.$$("chart").parse((0,o.x)()),this.on(this.app,"currency:select",(function(t){e.ListId&&e.ListId===t||(e.$$("chart").clearAll(),e.$$("chart").parse((0,o.T)()),e.ListId=t)}))}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),h}(n.iC)},281:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var n=r(747),o=r(542),i=[{value:"Prepare finance report",checked:!0},{value:"Solex project strategy meeting",checked:0},{value:"WestEurope partners call",checked:0},{value:"Prepare presentation for summer conference",checked:0},{value:"Check messages",checked:!0},{value:"Market research analysis",checked:!0},{value:"Prepare presentation for spring conference",checked:0},{value:"Discussing new theme for website",checked:!0},{value:"WestEurope partners call",checked:!0},{value:"Scroll task",checked:!0}];function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function l(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function p(e){return{id:e,view:"tree",css:"check_tree",type:{checkbox:function(e){return e.nocheckbox?"":'<span style="line-height:32px" class="webix_inp_checkbox_border webix_el_group webix_checkbox_'.concat(e.checked?1:0,'">\n\t\t\t\t\t<input style="margin-top:11px;display:none" id="x1557329607426" type="checkbox" ').concat(e.checked?'checked="1"':""," aria-label=").concat(e.checked?"Checked":"Unchecked",'><a role="presentation" onclick="javascript:void(0)"><button role="checkbox" aria-checked=').concat(e.checked?"true":"false"," aria-label=").concat(e.checked?"Checked":"Unchecked",' type="button" aria-invalid="false" class="webix_custom_checkbox webix_tree_checkbox"></button></a></span>')},template:function(e,t){return"".concat(t.checkbox(e),' <span class="').concat(e.checked?"checked":"",'">').concat(e.value,"</span>")}},select:!0,on:{onItemCheck:function(){this.refresh()}}}}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(d,e);var t,r,n,a,h=(n=d,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(a){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return l(this,e)});function d(){return u(this,d),h.apply(this,arguments)}return t=d,(r=[{key:"config",value:function(){return{rows:[{view:"tabbar",multiview:!0,options:[{id:"all",value:"To-do list (all)"},{id:"first",value:"Today"},{id:"second",value:"Tomorrow"}]},{animate:!1,cells:[p("all"),p("first"),p("second")]}]}}},{key:"init",value:function(){for(var e=this.getRoot().queryView("tree","all"),t=0;t<e.length;t++)e[t].parse((0,o.T)(i))}}])&&s(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),d}(n.iC)},650:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var n=r(747),o=webix.Date.strToDate("%Y-%m-%d"),i=new webix.DataCollection({data:[{id:1,mark:1,photo:"whitten",name:"Claire Whitten",stars:5,date:"2019-01-23",text:"Morgan always completes any assignment on time and to a high standard. No absences without valid reason in 6 months. Polite, courteous, respectful and charming at all times and in all situations, without being obsequious.",tag:"New"},{id:2,mark:0,photo:"sho",name:"Danielle Sho",stars:5,date:"2019-01-19",text:"Unfailingly courteous even when dealing with a difficult person or situation. Morgan has outstanding artistic or craft skills, bringing creativity and originality to the task.",tag:"Pending"},{id:3,mark:0,photo:"ilyushin",name:"Mikhaila Ilyushin",stars:5,date:"2019-01-12",text:"Has a natural flair for jobs involving the use of the hands or hand-tools. Able to cope expertly with intricate detail. Morgan pays great attention to detail. She always presented work properly checked and completely free of error.",tag:"New"},{id:4,mark:1,photo:"yu",name:"Alex Yu",stars:5,date:"2019-01-9",text:"Aiming for a top job in the organization. She sets very high standards, aware that this will bring attention and promotion. Reaches a decision rapidly after taking account of all likely outcomes and estimating the route most likely to bring success.",tag:"Pending"},{id:5,mark:0,photo:"winslow",name:"Joan Winslow",stars:5,date:"2019-01-3",text:"Morgan is willing to face physical risks and danger, and appears to do so without fear. Sets an example of bravery that inspires others. Always succeeds in explaining ideas clearly. Others find Morgan easy to understand.",tag:"New"}],scheme:{$init:function(e){e.date=o(e.date)}}});function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function l(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function p(){this.config.icon="wxi-close"==this.config.icon?"mdi mdi-magnify":"wxi-close";var e=this.$scope.$$("srch:field");e.isVisible()?e.hide():e.show();var t=this.$scope.$$("header");t.isVisible()?t.hide():t.show(),this.refresh()}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(h,e);var t,r,n,o,a=(n=h,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return l(this,e)});function h(){return u(this,h),a.apply(this,arguments)}return t=h,r=[{key:"config",value:function(){var e=webix.Date.dateToStr("%j %M %Y");return{gravity:1.25,rows:[{view:"toolbar",height:48,padding:{right:8},elements:[{template:"Customer feedback",type:"header",borderless:!0,localId:"header"},{view:"text",localId:"srch:field",placeholder:"Type to search by name",hidden:!0,on:{onViewShow:function(){var e=this;webix.delay((function(){e.focus()}))},onTimedKeyPress:function(){var e=this.getValue().toLowerCase();this.$scope.$$("list").filter((function(t){return-1!==t.name.toLowerCase().indexOf(e)}))}}},{view:"icon",icon:"mdi mdi-magnify",click:p}]},{view:"list",localId:"list",css:"reviews",type:{height:168,stars:function(e){for(var t="",r=1;r<=5;r++){var n=r<=e.stars?"gold":"grey";t+="<span class='webix_icon mdi mdi-star star ".concat(n," ").concat(r,"'></span>")}return"<span class='stars'>"+t+"</span>"},template:function(t,r){return'\n\t\t\t\t\t\t\t<div class="img"><img src="data/images/'.concat(t.photo,'.jpg" /></div>\n\t\t\t\t\t\t\t<div class="text">\n\t\t\t\t\t\t\t\t<span class="webix_icon mdi mdi-bookmark-').concat(t.mark?"check":"plus",' mark"></span>\n\t\t\t\t\t\t\t\t<span class="name">').concat(t.name,"</span>\n\t\t\t\t\t\t\t\t").concat(r.stars(t),'\n\t\t\t\t\t\t\t\t<span class="date">').concat(e(t.date),'</span>\n\t\t\t\t\t\t\t\t<span class="message">').concat(t.text,'</span>\n\t\t\t\t\t\t\t\t<span class="tag ').concat(t.tag,'">').concat(t.tag,"</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t")}},tooltip:{template:"#text#",css:"review_tooltip"},onClick:{mark:function(e,t){var r=this.getItem(t).mark;return this.updateItem(t,{mark:!r}),!1}}}]}}},{key:"init",value:function(){this.$$("list").parse(i)}}],r&&s(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),h}(n.iC)},228:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>p});var n=r(747),o=[{id:"1",value:"Manufacturing",number:294,type:"all"},{id:"2",value:"Wholesale stores",number:335,type:"first"},{id:"3",value:"Retail stores",number:422,type:"second"}];function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function c(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function f(){this.config.icon="wxi-close"==this.config.icon?"mdi mdi-magnify":"wxi-close";var e=this.$scope.$$("srch:field");e.isVisible()?e.hide():e.show();var t=this.$scope.$$("header");t.isVisible()?t.hide():t.show(),this.refresh()}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(h,e);var t,r,n,i,p=(n=h,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(n);if(i){var r=l(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return c(this,e)});function h(){return a(this,h),p.apply(this,arguments)}return t=h,(r=[{key:"config",value:function(){return{height:209,rows:[{view:"toolbar",height:48,padding:{right:8},elements:[{template:"Revenues",type:"header",borderless:!0,localId:"header"},{view:"text",localId:"srch:field",placeholder:"Type to search by name",hidden:!0,on:{onViewShow:function(){var e=this;webix.delay((function(){e.focus()}))},onTimedKeyPress:function(){var e=this.getValue().toLowerCase();this.$scope.$$("list").filter((function(t){return-1!==t.value.toLowerCase().indexOf(e)}))}}},{view:"icon",icon:"mdi mdi-magnify",click:f}]},{view:"list",localId:"list",css:"stats",type:{height:"auto",template:function(e){return'<span class="title">'.concat(e.value,"</span>\n\t\t\t\t\t\t<div class='progress_bar_element'>\n\t\t\t\t\t\t<div class='progress_result ").concat(e.type||"","' style='width:").concat(e.number/10*2+"%","'></div>\n\t\t\t\t\t\t</div>")}}}]}}},{key:"init",value:function(){this.$$("list").parse(o)}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),h}(n.iC)},238:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){return a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},a(e,t)}function u(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function s(e){return s=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},s(e)}r.r(t),r.d(t,{default:()=>c});var c=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&a(e,t)}(f,e);var t,r,n,c,l=(n=f,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=s(n);if(c){var r=s(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return u(this,e)});function f(){return o(this,f),l.apply(this,arguments)}return t=f,(r=[{key:"config",value:function(){return{view:"datatable",localId:"diskpool",select:!0,resizeColumn:!0,sort:"multi",columns:[{id:"Id",header:"Id",hidden:!0},{id:"Name",header:"DiskPool Name",fillspace:!0,sort:"string"},{id:"DiskPoolType",header:"Type",width:150,sort:"string"},{id:"ReplicationType",header:"Replication Type",width:100,sort:"string"}],url:function(){return webix.ajax().get("/api/v1/DiskPools").then((function(e){var t=e.json();return"Error"==t.Result?(webix.alert({title:"Error",text:t.Message,type:"alert-error"}),null):(console.log(t.Data.Items),t.Data.Items)}),(function(e){var t=JSON.parse(e.response);return webix.alert({title:"Error",text:t.Message,type:"alert-error"}),webix.storage.session.put("ReturnUrl","/main/diskpools"),location.href="/#!/login",null}))},ready:function(){this.sort([{by:"Name",dir:"asc"}]),this.markSorting("Name","asc",!0)}}}}])&&i(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),f}(r(747).iC)},128:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>f});var n=r(747),o=r(956);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function c(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(p,e);var t,r,n,i,f=(n=p,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(n);if(i){var r=l(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return c(this,e)});function p(){return a(this,p),f.apply(this,arguments)}return t=p,(r=[{key:"config",value:function(){return{view:"datatable",localId:"disk",select:!0,resizeColumn:!0,sort:"multi",columns:[{id:"Id",header:"Id",hidden:!0},{id:"DiskPoolId",header:"DiskPoolId",hidden:!0},{id:"ServerName",header:"Server Name",width:150,sort:"string",template:function(e){return"<span>".concat(e.Server.Name,"</spen>")}},{id:"DiskPoolName",header:"DiskPool Name",width:200,sort:"string"},{id:"Name",header:"Disk Name",fillspace:!0,sort:"string"},{id:"State",header:"Status",width:100,sort:"string",template:function(e){var t="gray";switch(e.State){case"Good":t="green";break;case"Weak":t="yellow";break;default:t="red"}return'<span class="'.concat(t,'">').concat(e.State,"</span>")}},{id:"Path",header:"Path",width:150,sort:"string"},{id:"TotalInode",header:"TotalInode",width:100,sort:"int",format:webix.Number.numToStr({groupDelimiter:",",groupSize:3,decimalDelimiter:".",decimalSize:0})},{id:"UsedInode",header:"UsedInode",width:100,sort:"int",format:webix.Number.numToStr({groupDelimiter:",",groupSize:3,decimalDelimiter:".",decimalSize:0})},{id:"TotalSize",header:"TotalSize",width:100,sort:"string",template:function(e){return"".concat((0,o.W)(e.TotalSize))}},{id:"UsedSize",header:"UsedSize",width:100,sort:"string",template:function(e){return"".concat((0,o.W)(e.UsedSize))}},{id:"Read",header:"Read",width:100,sort:"string",template:function(e){return"".concat((0,o.W)(e.Read))}},{id:"Write",header:"Write",width:100,sort:"string",template:function(e){return"".concat((0,o.W)(e.Write))}}],url:function(){return webix.ajax().get("/api/v1/Disks").then((function(e){var t=e.json();return"Error"==t.Result?(webix.alert({title:"Error",text:t.Message,type:"alert-error"}),null):(console.log(t.Data.Items),t.Data.Items)}),(function(e){var t=JSON.parse(e.response);return webix.alert({title:"Error",text:t.Message,type:"alert-error"}),webix.storage.session.put("ReturnUrl","/main/disks"),location.href="/#!/login",null}))},ready:function(){this.sort([{by:"ServerName",dir:"asc"},{by:"Name",dir:"asc"}]),this.markSorting("ServerName","asc"),this.markSorting("Name","asc",!0)}}}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),p}(n.iC)},598:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){return a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},a(e,t)}function u(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function s(e){return s=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},s(e)}r.r(t),r.d(t,{default:()=>c});var c=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&a(e,t)}(f,e);var t,r,n,c,l=(n=f,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=s(n);if(c){var r=s(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return u(this,e)});function f(){return o(this,f),l.apply(this,arguments)}return t=f,(r=[{key:"config",value:function(){return{view:"datatable",localId:"ksanuser",select:!0,resizeColumn:!0,sort:"multi",columns:[{id:"Id",header:"Id",hidden:!0},{id:"Name",header:"User Name",fillspace:!0,sort:"string"},{id:"Email",header:"Email",width:150,sort:"string"}],url:function(){return webix.ajax().get("/api/v1/KsanUsers").then((function(e){var t=e.json();return"Error"==t.Result?(webix.alert({title:"Error",text:t.Message,type:"alert-error"}),null):(console.log(t.Data.Items),t.Data.Items)}),(function(e){var t=JSON.parse(e.response);return webix.alert({title:"Error",text:t.Message,type:"alert-error"}),webix.storage.session.put("ReturnUrl","/main/ksanusers"),location.href="/#!/login",null}))},ready:function(){this.sort([{by:"Name",dir:"asc"}]),this.markSorting("Name","asc",!0)}}}}])&&i(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),f}(r(747).iC)},899:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){return a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},a(e,t)}function u(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function s(e){return s=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},s(e)}r.r(t),r.d(t,{default:()=>c});var c=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&a(e,t)}(p,e);var t,r,n,c,f=(n=p,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=s(n);if(c){var r=s(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return u(this,e)});function p(){return o(this,p),f.apply(this,arguments)}return t=p,(r=[{key:"config",value:function(){return{view:"form",id:"login_form",borderless:!0,elements:[{align:"center"},{view:"text",width:300,label:"Id",name:"LoginId",align:"center",on:{onEnter:function(e){l(this.getFormView().getValues())}}},{view:"text",width:300,type:"password",label:"Password",name:"Password",align:"center",on:{onEnter:function(e){l(this.getFormView().getValues())}}},{borderless:!0,css:{"text-align":"center"},cols:[{view:"button",value:"Login",css:"webix_primary",width:150,align:"center",click:function(){l(this.getFormView().getValues())}},{view:"button",value:"Cancel",width:150,align:"center"}]},{align:"center"}]}}}])&&i(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),p}(r(747).iC);function l(e){webix.ajax().headers({"Content-Type":"application/json"}).post("/api/v1/Account/login",JSON.stringify(e)).then((function(e){console.log(e);var t=e.json();if("Success"==t.Result){var r=webix.storage.session.get("ReturnUrl");location.href=null!=r&&""!=r?r:"/"}else webix.alert({title:t.Result,text:t.Message,type:"alert-error"})}),(function(e){var t=JSON.parse(e.response);webix.alert({title:"Error",text:t.Message,type:"alert-error"})}))}},748:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r(747);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t){return u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},u(e,t)}function s(e,t){if(t&&("object"===o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function c(e){return c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},c(e)}var l=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&u(e,t)}(h,e);var t,r,o,l,p=(o=h,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=c(o);if(l){var r=c(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return s(this,e)});function h(){return i(this,h),p.apply(this,arguments)}return t=h,(r=[{key:"config",value:function(){var e=this;return{type:"clean",rows:[{view:"toolbar",padding:5,height:58,cols:[{view:"icon",icon:"mdi mdi-menu",click:function(){return e.app.callEvent("menu:toggle")}},{view:"label",label:"KSAN",css:"header_label"},{},{view:"icon",icon:"mdi mdi-bell",tooltip:"Open latest notifications",click:function(){this.$scope.notifications.showWin(this.$view)}},{width:8},{view:"icon",icon:"mdi mdi-settings"},{view:"icon",icon:"mdi mdi-logout",click:f}]},{cols:[{localId:"side:menu",view:"sidebar",css:"webix_dark",width:200,data:[{id:"dash",value:"Dashboard",icon:"mdi mdi-view-dashboard"},{value:"System",icon:"mdi mdi-monitor-multiple",data:[{id:"servers",value:"Server",icon:"mdi mdi-server-network"},{id:"services",value:"Service",icon:"mdi mdi-puzzle"}]},{value:"Storage",icon:"mdi mdi-database",data:[{id:"disks",value:"Disk",icon:"mdi mdi-harddisk"},{id:"diskpools",value:"Diskpool",icon:"mdi mdi-cloud"}]},{value:"User",icon:"mdi mdi-account-box-multiple",data:[{id:"ksanusers",value:"Ksan User",icon:"mdi mdi-account-box"}]}]},{$subview:!0}]}]}}},{key:"init",value:function(){var e=this;this.use(n.Gr.Menu,this.$$("side:menu")),this.on(this.app,"menu:toggle",(function(){return e.$$("side:menu").toggle()})),webix.attachEvent("onBeforeAjax",(function(e,t,r,n,o,i,a){n.withCredentials=!0,o["Content-type"]="application/json; charset=utf-8"}))}}])&&a(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),h}(n.iC);function f(){webix.storage.cookie.clear(),location.href="/#!/login"}},297:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>f});var n=r(747),o=r(956);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function c(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(p,e);var t,r,n,i,f=(n=p,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(n);if(i){var r=l(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return c(this,e)});function p(){return a(this,p),f.apply(this,arguments)}return t=p,(r=[{key:"config",value:function(){return{view:"datatable",localId:"server",select:!0,resizeColumn:!0,sort:"multi",columns:[{id:"Id",header:"Id",hidden:!0},{id:"Name",header:"Server Name",fillspace:!0,sort:"string"},{id:"IpAddress",header:"Ip Address",width:150,sort:"string",template:function(e){return null!=e.NetworkInterfaces&&e.NetworkInterfaces.length>0?e.NetworkInterfaces[0].IpAddress:""}},{id:"State",header:"Status",width:100,sort:"string",template:function(e){var t="gray";switch(e.State){case"Online":t="green";break;case"Offline":t="red";break;case"Timeout":t="blue";break;default:t="gray"}return'<span class="'.concat(t,'">').concat(e.State,"</span>")}},{id:"LoadAverage1M",header:"1M",width:100,sort:"int",format:webix.Number.numToStr({groupDelimiter:",",groupSize:3,decimalDelimiter:".",decimalSize:1})},{id:"LoadAverage5M",header:"5M",width:100,sort:"int",format:webix.Number.numToStr({groupDelimiter:",",groupSize:3,decimalDelimiter:".",decimalSize:1})},{id:"LoadAverage15M",header:"15M",width:100,sort:"int",format:webix.Number.numToStr({groupDelimiter:",",groupSize:3,decimalDelimiter:".",decimalSize:1})},{id:"MemoryTotal",header:"Total",width:120,sort:"string",template:function(e){return"".concat((0,o.W)(e.MemoryTotal))}},{id:"MemoryFree",header:"Free",width:120,sort:"string",template:function(e){return"".concat((0,o.W)(e.MemoryFree))}},{id:"MemoryUsed",header:"Used",width:120,sort:"string",template:function(e){return"".concat((0,o.W)(e.MemoryUsed))}}],url:function(){return webix.ajax().get("/api/v1/Servers/Details").then((function(e){var t=e.json();return"Error"==t.Result?(webix.alert({title:"Error",text:t.Message,type:"alert-error"}),null):(console.log(t.Data.Items),t.Data.Items)}),(function(e){var t=JSON.parse(e.response);return webix.alert({title:"Error",text:t.Message,type:"alert-error"}),webix.storage.session.put("ReturnUrl","/main/servers"),location.href="/#!/login",null}))},ready:function(){this.sort([{by:"Name",dir:"asc"}]),this.markSorting("Name","asc",!0)}}}},{key:"init",value:function(){}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),p}(n.iC)},700:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>f});var n=r(747),o=r(956);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function c(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(p,e);var t,r,n,i,f=(n=p,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(n);if(i){var r=l(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return c(this,e)});function p(){return a(this,p),f.apply(this,arguments)}return t=p,(r=[{key:"config",value:function(){return{view:"datatable",localId:"serveice",select:!0,resizeColumn:!0,sort:"multi",columns:[{id:"Id",header:"Id",hidden:!0},{id:"ServerName",header:"Server Name",width:150,sort:"string",template:function(e){return"<span>".concat(e.Server.Name,"</spen>")}},{id:"Name",header:"Service Name",fillspace:!0,sort:"string"},{id:"State",header:"Status",width:100,sort:"string",template:function(e){var t="gray";switch(e.State){case"Online":t="green";break;case"Offline":t="red";break;case"Timeout":t="blue";break;default:t="gray"}return'<span class="'.concat(t,'">').concat(e.State,"</span>")}},{id:"ServiceType",header:"Type",width:100,sort:"string"},{id:"CpuUsage",header:"Cpu Usage",width:100,sort:"int",format:webix.Number.numToStr({groupDelimiter:",",groupSize:3,decimalDelimiter:".",decimalSize:1})},{id:"MemoryTotal",header:"Total",width:100,sort:"int",template:function(e){return"".concat((0,o.W)(e.MemoryTotal))}},{id:"MemoryUsed",header:"Used",width:100,sort:"int",template:function(e){return"".concat((0,o.W)(e.MemoryUsed))}},{id:"ThreadCount",header:"ThreadCount",width:100,sort:"int",format:webix.Number.numToStr({groupDelimiter:",",groupSize:3,decimalDelimiter:".",decimalSize:0})}],url:function(){return webix.ajax().get("/api/v1/Services").then((function(e){var t=e.json();return"Error"==t.Result?(webix.alert({title:"Error",text:t.Message,type:"alert-error"}),null):(console.log(t.Data.Items),t.Data.Items)}),(function(e){var t=JSON.parse(e.response);return webix.alert({title:"Error",text:t.Message,type:"alert-error"}),webix.storage.session.put("ReturnUrl","/main/services"),location.href="/#!/login",null}))},ready:function(){this.sort([{by:"ServerName",dir:"asc"},{by:"Name",dir:"asc"}]),this.markSorting("ServerName","asc"),this.markSorting("Name","asc",!0)}}}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),p}(n.iC)},796:(e,t,r)=>{var n={"./en":502,"./en.js":502};function o(e){var t=i(e);return r(t)}function i(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=i,e.exports=o,o.id=796},403:(e,t,r)=>{var n={"./dash":573,"./dash/":573,"./dash/currencies":743,"./dash/currencies.js":743,"./dash/index":573,"./dash/index.js":573,"./dash/progress":273,"./dash/progress.js":273,"./dash/projects":281,"./dash/projects.js":281,"./dash/reviews":650,"./dash/reviews.js":650,"./dash/stats":228,"./dash/stats.js":228,"./diskpools":238,"./diskpools.js":238,"./disks":128,"./disks.js":128,"./ksanusers":598,"./ksanusers.js":598,"./login":899,"./login.js":899,"./main":748,"./main.js":748,"./servers":297,"./servers.js":297,"./services":700,"./services.js":700};function o(e){var t=i(e);return r(t)}function i(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=i,e.exports=o,o.id=403}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,r){return t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},t(e,r)}function o(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}function i(e){return i=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},i(e)}r.d(n,{default:()=>a});var a=function(e){!function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),r&&t(e,r)}(s,e);var r,n,a,u=(n=s,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=i(n);if(a){var r=i(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return o(this,e)});function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(t=u.call(this,webix.extend({id:"admin-app",version:"1.0.0",start:"/main/dash",debug:!0},e,!0))).attachEvent("app:error:resolve",(function(e,t){window.console.error(t)})),t}return r=s,Object.defineProperty(r,"prototype",{writable:!1}),r}(r(747).Dd)})(),App=n.default})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
#!/usr/bin/python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""


import os, sys
import pdb

if os.path.dirname(os.path.abspath(os.path.dirname(__file__))) not in sys.path:
    sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))

#sys.path.insert(1, os.getcwd())
#sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from network.network_mq_handle import *
from service.service_manage import ServiceMonitoring
from server.server_mq_handle import MonUpdateServerUsage
from disk.disk_mq_handle import DiskUsageMonitoring, ReportDiskIo
from const.network import RequestNetworkInterfaceItems
from mqmanage.mq import Mq
from rest.agent_api_server import StartRestServer
from const.common import *

# Check Network Info



class AgentConf: pass

class TmpConf: pass

setattr(TmpConf, KeyCommonSection, object())
setattr(TmpConf, KeyPortalHost, None)
setattr(TmpConf, KeyPortalPort, None)
setattr(TmpConf, KeyMQHost, None)
setattr(TmpConf, KeyMQUser, None)
setattr(TmpConf, KeyMQPort, None)
setattr(TmpConf, KeyMQPassword, None)
setattr(TmpConf, KeyServerId, None)
setattr(TmpConf, KeyManagementNetDev, None)
setattr(TmpConf, KeyDefaultNetworkId, None)
setattr(AgentConf, KeyCommonSection, TmpConf)

g_Conf = {KeyCommonSection: AgentConf, KeyMonitorSection: None}

def AddNewRoutingKeyWithServerId(conf):
    serverid = conf.ServerId
    """
    Add Rpc routing Key to Routing Key List
    """
    EdgeRoutingKeyList.append("*.servers.%s.interfaces.check" % serverid)
    EdgeRoutingKeyList.append("*.servers.%s.interfaces.update" % serverid)

    EdgeRoutingKeyList.append("*.servers.%s.disks.write_disk_id" % serverid)
    EdgeRoutingKeyList.append("*.servers.%s.disks.check_mount" % serverid)

    EdgeRoutingKeyList.append("*.services.%s.config.gw.load" % serverid)
    EdgeRoutingKeyList.append("*.services.%s.config.gw.save" % serverid)
    EdgeRoutingKeyList.append("*.services.%s.config.osd.load" % serverid)
    EdgeRoutingKeyList.append("*.services.%s.config.osd.save" % serverid)
    EdgeRoutingKeyList.append("*.services.%s.control" % serverid)

def MqHandler(GlobalFlag, logger):
    ServiceList = dict()
    LocalIpList = list()
    ServiceList['IdList'] = list()
    ServiceList['Details'] = dict()
    Conf = WaitAgentConfComplete(inspect.stack()[1][3], logger)
    conf = GetAgentConfig(Conf)

    LoadServiceList(conf, ServiceList, LocalIpList, logger)

    AddNewRoutingKeyWithServerId(conf)

    mq = Mq(conf.MQHost, conf.MQPort, '/',  conf.MQUser, conf.MQPassword,
            EdgeRoutingKeyList, ExchangeName,
            'ksan-agent-%s' % conf.ServerId, ServerId=conf.ServerId, ServiceList=ServiceList,
            logger=logger, MonConf=conf, GlobalFlag=GlobalFlag)
    mq.Receiver()


def CheckAgentMonitoringOption(Conf):
    if not hasattr(Conf, 'monitor'):
        class MonitorConf: pass
        setattr(MonitorConf, 'ServerMonitorInterval', 5000)
        setattr(MonitorConf, 'NetworkMonitorInterval', 5000)
        setattr(MonitorConf, 'DiskMonitorInterval', 5000)
        setattr(MonitorConf, 'ServiceMonitorInterval', 5000)
        setattr(Conf, 'monitor', MonitorConf)

    return Conf


def Start(LocalIp, logger=None, Foreground=False):
    global g_AgentConf
    """
    LocalIp is used for checking /etc/hosts right after register server.
    local server info can be fail to get right after regster.
    :param conf:
    :param logger:
    :param Foreground:
    :param LocalIp:
    :return:
    """

    if Foreground is False:
        D = Daemon(KsanAgentPidFile, 'ksanAgent')
        D.start()


    DiskIoInfo = {'list': []}
    GlobalFlag = {'ServiceUpdated': Checked, 'NetworkUpdated': Checked, 'DiskUpdated': Checked, 'DiskPoolUpdated': Checked}

    threads = list()

    # get ksanAnge.conf
    #th = threading.Thread(target=GetSystemConfiguration, args=(logger, ))
    #th.start()
    #threads.append(th)

    #MqHandler(conf, GlobalFlag, logger=logger)
    th = threading.Thread(target=MqHandler, args=(GlobalFlag, logger))
    th.start()
    threads.append(th)

    # register network thread
    th = threading.Thread(target=RegisterManagementNetwork, args=(logger, ))
    th.start()
    threads.append(th)

    # network monitoring thread
    th = threading.Thread(target=UpdateNetworkStat, args=(g_Conf, GlobalFlag, logger, ))
    th.start()
    threads.append(th)


    # service monitoring thread
    th = threading.Thread(target=ServiceMonitoring, args=(g_Conf, GlobalFlag, logger, ))
    th.start()
    threads.append(th)

    #
    th = threading.Thread(target=EdgeCheckEtcHosts, args=(logger, LocalIp,))
    th.start()
    threads.append(th)

    # disk usage monitoring thread
    th = threading.Thread(target=DiskUsageMonitoring, args=(g_Conf, DiskIoInfo, GlobalFlag, logger, ))
    th.start()
    threads.append(th)

    # disk I/O monitoring thread
    th = threading.Thread(target=ReportDiskIo, args=(g_Conf, DiskIoInfo, GlobalFlag, logger, ))
    th.start()
    threads.append(th)

    # server usage monitoring thread
    th = threading.Thread(target=MonUpdateServerUsage, args=(g_Conf, logger, ))
    th.start()
    threads.append(th)

    # register service thread
    #th = threading.Thread(target=KsanServiceRegister, args=(conf, TypeServiceAgent, logger, ))
    #th.start()
    #threads.append(th)

    Pid = os.getpid()
    CreatePidFile(Pid, KsanAgentPidFile)
    #MqHandler(conf, GlobalFlag, logger=logger)

    #Restfull server thread
    RestFullServerPort = 6380
    StartRestServer(RestFullServerPort, g_Conf)
    for th in threads:
        th.join()

def Stop():
    D = Daemon(KsanAgentPidFile, 'ksanAgent')
    D.stop()


@catch_exceptions()
def RegisterManagementNetwork(logger):

    Conf = WaitAgentConfComplete(inspect.stack()[1][3], logger, CheckNetworkDevice=True)
    conf = GetAgentConfig(Conf)

    time.sleep(5)
    NetworkDevice = conf.ManagementNetDev
    if not NetworkDevice:
        LocalMgmtIp = conf.PortalHost
        netif = GetNetwork(Ip=LocalMgmtIp, logger=logger)

        NetworkDevice = netif.NicInfo['Name']
        conf.ManagementNetDev = NetworkDevice
    else:
        LocalMgmtIp = None
        netif = GetNetwork(Ip = LocalMgmtIp, logger=logger)


    nicinfo = netif.GetNicInfoWithNicName(NetworkDevice)
    netif = RequestNetworkInterfaceItems(NetworkDevice, Description='Management Network', logger=logger)
    netif.Set(nicinfo)
    isNetworkAdded = False
    RetryCnt = 0
    while True:
        RetryCnt += 1
        Res, Errmsg, Ret = AddNetworkInterface(conf.PortalHost, int(conf.PortalPort), conf.PortalApiKey, conf.ServerId,
                                               netif, logger=logger)
        if Res != ResOk:
            logger.error('fail to add Network Interface %s retry:%d' %(Errmsg, RetryCnt))
        else:
            NetworkInterfaceId = None
            if Ret.Result == ResultSuccess :
                logging.log(logging.INFO, "success to add network %s %s" % (str(Ret.Result), str(Ret.Message)))
                NetworkInterfaceId = Ret.Data.Id
            elif Ret.Code == CodeDuplicated:
                Res, Errmsg, Ret, Data = GetNetworkInterface(conf.PortalHost, int(conf.PortalPort), conf.PortalApiKey,
                                                             conf.ServerId, InterfaceId=None, disp=False, logger=logger)
                if Res != ResOk or Ret.Result != ResultSuccess:
                    logging.log(logging.INFO, "%s %s" % (str(Ret.Result), str(Ret.Message)))
                else:
                    NetworkInterfaceId = Data[0].Id
            else:
                logger.error('fail to add Network Interface' + Ret.Message)
            if NetworkInterfaceId is not None:
                UpdateConf(MonServicedConfPath, 'mgs', 'DefaultNetworkId', NetworkInterfaceId, logger)
                isNetworkAdded = True
                break
        if RetryCnt <= 5:
            time.sleep(5)
        else:
            logger.error('fail to add Network Interface. ' + Ret.Message)
            break

    if isNetworkAdded is True:
        RegisterService(conf, KsanAgentName, logger, ServiceNicname='Agent')



def GetValidEtcHostsInfo(Data):
    ValidHostsInfo = list()
    for svr in Data:
        try:
            if len(svr.NetworkInterfaces) > 0:
                ManagementIp = svr.NetworkInterfaces[0].IpAddress
            else:
                continue
            HostName = svr.Name
            ValidHostsInfo.append((ManagementIp, HostName))
        except Exception as err:
            print(err)
    return ValidHostsInfo


def EdgeCheckEtcHosts(logger, LocalIp):
    global g_Conf
    """
    check current serverlist and check /etc/hosts with the server info and update if not applied.
    :param conf:
    :return:
    """
    Conf = WaitAgentConfComplete(inspect.stack()[1][3], logger)

    conf = GetAgentConfig(Conf)

    LocalHostInfo = list()
    if LocalIp is not None: # run by ksanServerRegister
        out, err = shcall('hostname')
        LocalHostName = out[:-1]
        LocalHostInfo.append((LocalIp, LocalHostName))

    Res, Errmsg, Ret, Data = GetAllServerDetailInfo(conf.PortalHost, int(conf.PortalPort), conf.PortalApiKey, logger=logger)
    if Res == ResOk:
        print(Ret.Result, Ret.Message)
        ValidHostsInfo = GetValidEtcHostsInfo(Data)
        ValidHostsInfo += LocalHostInfo
        UpdateEtcHosts(ValidHostsInfo, 'add')
    else:
        logger.error('fail to get server info %s' % Errmsg)


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanAgent {start|stop|status} [option]
                start                                                                  : start ksanAgent
                stop                                                                   : stop ksanAgent 
                restart                                                                : restart ksanAgent
                status                                                                 : status ksanAgent
        [options]
                -h, --help                                                             : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {start|stop|status} [option]"
    parser = MyOptionParser(usage=usage)
    #parser.add_option('-S', "--Server", action='store_true',
    #                  dest='Server', default=False, help='Server Option')
    parser.add_option('-S', "--ServerId", dest="id", help='server id')
    parser.add_option('-i', "--LocalIp", dest="ip", default=None, help='Local Ip Address')
    parser.add_option('-D', "--Description", dest="desc", default='', help='server description')
    parser.add_option('-N', "--Name", dest="NicName", default=None, help='Network Interface Name')
    parser.add_option('-T', "--Detail", dest="Detail", default=None, help='server info in detail')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='Debug mode')
    parser.add_option('-f', "--Foreground", dest="Foreground", action='store_true', default=False, help='Running as Foreground')

    options, args = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    logger = None
    if options.debug is True:
        logger = Logging(instance=KsanAgentBinaryName, loglevel='debug')
    else:
        logger = Logging(instance=KsanAgentBinaryName, loglevel='error')
    logger = logger.create()

    ret, conf = GetConf(MonServicedConfPath)
    #if ret is False and args[0] != 'init':
    #    print('Check if configuration is done')
    #    sys.exit(-1)

    if args[0] == 'register':
        res, hostname, ip = GetHostInfo()
        if res is not True:
            print('fail to get HostName and Ip, %s' % hostname)
            sys.exit(-1)
        Res, Errmsg, Ret, ServerInfo = RegisterServer(conf.PortalHost, int(conf.PortalPort), conf.PortalApiKey, options.desc,
                                                      Name=hostname, logger=logger)
        if Res != ResOk:
            print('fail to add Server' + Errmsg)
        else:
            if Ret.Result == ResultSuccess or Ret.Code == CodeDuplicated:
                UpdateConf(MonServicedConfPath, 'mgs', 'ServerId', ServerInfo.Id, logger)
                print('Done')
            else:
                print('fail to add Server' + Ret.Message)

    elif args[0] == 'unregister':
        if options.id is None:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = RemoveServer(conf.PortalHost, int(conf.PortalPort), conf.PortalApiKey, ServerId=options.id, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'start':
        Ret, Pid = IsDaemonRunning(KsanAgentPidFile, 'ksanAgent')
        if Ret is True:
            print('already running')
        else:
            Start(options.ip, logger=logger, Foreground=options.Foreground)
            print('Done')

    elif args[0] == 'stop':
        Ret, Pid = IsDaemonRunning(KsanAgentPidFile, 'ksanAgent')
        if Ret is False:
            print('ksanAgent is not running')
        else:
            Stop()
            print('Done')

    elif args[0] == 'restart':
            Stop()
            Start(options.ip, logger=logger, Foreground=options.Foreground)
            print('Done')


    elif args[0] == 'status':
        print('KsanAgent ... ',end=' ')
        Ret, Pid = IsDaemonRunning(KsanAgentPidFile, 'ksanAgent')
        if Ret is True:
            print('Ok')
        else:
            print('Not Ok')
    else:
        parser.print_help()

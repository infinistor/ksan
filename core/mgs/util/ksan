#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""
import os, sys

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
sys.path.insert(1, os.getcwd())
from disk.disk_api import DiskUtilHandler
from service.service_manage import ServiceUtilHandler
from configure.config import ConfigUtilHandler
from disk.diskpool_manage import DiskpoolUtilHandler
from server.server_manage import ServerUtilHandler
from user.user_manage import UserUtilHandler
from util.fsck import FsckUtilHandler
from util.getattr import GetAttrUtilHandler
from util.cbalance import CbalanceUtilHandler
from util.sysinfo import ShowSystemInfo
from common.base_utils import *


class KsanOptionParser(OptionParser):
    def __init__(self):
        super(KsanOptionParser, self).__init__()
        self.Usage = """
  ksan [sysinfo]|[server|service|disk|diskpool|user] [actions] [option]*
    [actions]
          sysinfo                                                                  : display summary of system info
          server   [add|remove|list|update]                                        : server management      
          service  [add|remove|list|start|stop|restart]                            : service management 
          config   [add|remove|list|set|get]                                       : service config management
          disk     [add|remove|list|start|stop|set]                                : disk management 
          diskpool [add|remove|list|add2disk|remove2disk|set]                      : diskpool management 
          user     [add|remove|list|add2storageclass|remove2storageclass|set]      : ksan user management 
          fsck                                                                     : fsck file  
          getattr                                                                  : display object info of file
          cbalance                                                                 : capacity balance 
          
    [option]
          --ServerName                                                             : server name 
          --ServiceName                                                            : service name
          --DiskName                                                               : disk name 
          --DiskPoolName                                                           : diskpool name 
          --UserName                                                               : user name
          --ServiceType                                                            : service type [ksanAgent|ksanOSD|ksanGW|
                                                                                     ksanLifecycleManager|ksanReplicationManager|ksanLogManager]
          --ConfVerId                                                              : specific config version id
                                                                                     'last' value specify the latest config version id.
          --Tolerance                                                              : diskpool's fault tolerance [disable|replication|ec(k:m)]
                                                                                     ec(k:m): Erasure Code (the number of data chunks : the number of coding chunks)
          --DiskPoolType                                                           : diskpool type[normal|archive|performance]
          --DefaultDiskPool                                                        : set user's default diskpool
          --StorageClass                                                           : user-defined storage class for s3-compatible
          --Host                                                                   : server ip or hostname 
          --DiskPath                                                               : osd disk's mount path 
          --Mode                                                                   : disk mode [ro|readonly|rw|readwrite|ma|maintenance]
          
          --BucketName                                                             : specify the name of the bucket 
          --KeyName                                                                : specify the object key
          --ObjId                                                                  : specify the object Id instead of object key
          --SrcDiskName                                                            : specify the source disk Name
          --DstDiskName                                                            : specify the destination disk name
          --EmptyDisk                                                              : set to enable empty disk operation
          --OkLocalMove                                                            : allow to move to local another disk (default: false)
          --Size                                                                   : specify the capacity to move in KB/KiB, MB/MiB, GB/GiB, TB/TiB, and PB/PiB units
          --CheckOnly                                                              : specify if you wish only to check not to fix 
          --VersionId                                                              : specify the object version Id if you wish particular version of an object
          --Checksum                                                               : display the checksum and size of the object from ksanOSD


          
    [option]
          --v                                                                      : display info in detail
          --vv                                                                     : display info in more detail
          --Email                                                                  : user's email address
"""

        self.AddOption()

    def AddOption(self):
        self.add_option('-d', "--Debug", dest='debug', action='store_true')
        self.add_option("--ServerName", "--servername", dest="ServerName", help='server name')
        self.add_option("--Host", "--host", dest="Host", help='server ip or hostname')
        self.add_option("--ServiceName", "--servicename", dest="ServiceName", help='service name')
        self.add_option("--ServiceType", "--servicetype", dest="ServiceType", help='service type')
        self.add_option("--ConfVerId", "--confverid", dest="ConfigVersionId", help='service config version id')

        self.add_option("--DiskName", "--diskname", dest="DiskName", help='disk name')
        self.add_option("--DiskPath", "--diskpath", dest="DiskPath", help='osd disk\'s mount path')
        self.add_option("--DiskPoolName", "--DiskpoolName", "--diskpoolname", dest="DiskpoolName", help='diskpool name')
        self.add_option("--Tolerance", "--tolerance", dest="RepType", help='replication type')
        self.add_option("--DiskPoolType", "--DiskpoolType", "--diskpooltype",dest="DiskpoolType", help='diskpool type')
        self.add_option("--UserName", "--username", dest="UserName", help='user name')
        self.add_option("--DefaultDiskPool", "--DefaultDiskpool", "--defaultdiskpool", dest="DefaultDiskpool", help='user\'s default diskpool')
        self.add_option("--ConfFile", "--conffile", dest="ConfFile", help='config file path')
        self.add_option("--Email", "--email", dest="Email", help='user\' e-mail address')
        self.add_option("--V", "--v", dest="Detail", action="store_true", help='display information in detail')
        self.add_option("--VV", "--vv", dest="MoreDetail", action="store_true", help='display information in more detail')

    def print_help(self):
        print(self.Usage)


class KsanSysinfoUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanSysinfoUtilOptParser, self).__init__()
        self.Usage = """
          ksan sysinfo [option]*  
          [options]
                --v                                 : show info in detail

          [example]
                # ./ksan sysinfo 
                # ./ksan sysinfo --v
        """

        self.AddOption()

    def AddOption(self):
        self.add_option("--V", "--v", dest="Detail", action="store_true", help='display information in detail')
        self.add_option('-d', "--Debug", "--debug", dest='debug', action='store_true')

    def print_help(self):
        print(self.Usage)

class KsanServerUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanServerUtilOptParser, self).__init__()
        self.Usage = """
          ksan server [add|remove|list] [option]*  
                add                                 : register server
                remove                              : remove server      
                list                                : show server info                            
                update                              : update server info                            
          [options]
                --ServerName                        : server name
                --Host                              : target server ip or hostname
                --v                                 : show info in detail
                --vv                                : show info in more detail
                
          [example]
                1. register server 
                 # ./ksan server add --Host 192.168.11.11               
                 # ./ksan server add --Host ksan_osd1
                 
                2. remove server
                 # ./ksan server remove --ServerName ksan_osd1 
                 
                3. show server info 
                 # ./ksan server list  
                 # ./ksan server list --v
                 # ./ksan server list --vv
        """

        self.AddOption()
    def AddOption(self):
        self.add_option('-d', "--Debug", dest='debug', action='store_true')
        self.add_option("--ServerName", "--servername", dest="ServerName", help='server name')
        self.add_option("--NetworkName", "--networkname", dest="NetworkName", help='network name')
        self.add_option("--Host", "--host", dest="Host", help='server ip or hostname')
        self.add_option("--V", "--v", dest="Detail", action="store_true", help='display information in detail')
        self.add_option("--VV", "--vv", dest="MoreDetail", action="store_true", help='display information in more detail')

    def print_help(self):
        print(self.Usage)

class KsanServiceUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanServiceUtilOptParser, self).__init__()
        self.Usage = """
        ksan service [add|remove|list|start|stop|restart] [option]*
              add                                   : register service                      
              remove                                : remove service 
              list                                  : show service info
              start                                 : start service 
              stop                                  : stop service 
              restart                               : restart service 

        [options]
              --ServerName                          : server name
              --ServiceName                         : service name 
              --ServiceType                         : service type [ksanAgent|ksanOSD|ksanGW|
                                                      ksanLifecycleManager|ksanReplicationManager|ksanLogManager]
              --v                                   : show info in detail
              --vv                                  : show info in more detail
              
         [example]
              1. register service 
                # ./ksan service add --ServiceType ksanosd --ServiceName osd1 --ServerName server1              
                # ./ksan service add --ServiceType ksangw --ServiceName gw2 --ServerName server2 
                
              2. remove service
                # ./ksan service remove --ServiceName osd1
                
              3. show service info 
                # ./ksan service list 
                # ./ksan service list --v
                # ./ksan service list --vv
                
              4. start/stop/restart service 
                # ./ksan service start --ServiceName osd1
                # ./ksan service stop --ServiceName osd1
              """

        self.AddOption()
    def AddOption(self):
        self.add_option('-d', "--Debug", dest='debug', action='store_true')
        self.add_option("--ServerName", "--servername", dest="ServerName", help='server name')
        self.add_option("--ServiceName", "--servicename",dest="ServiceName", help='service name')
        self.add_option("--ServiceType", "--servicetype", dest="ServiceType", help='service type')
        self.add_option("--V", "--v", dest="Detail", action="store_true", help='display information in detail')
        self.add_option("--VV", "--vv", dest="MoreDetail", action="store_true", help='display information in detail')

    def print_help(self):
        print(self.Usage)

class KsanConfigUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanConfigUtilOptParser, self).__init__()
        self.Usage = """
        ksan config [add|remove|list|set|get] [option]*            
              add                                   : register config   
              remove                                : remove config 
              list                                  : show all config info 
              set                                   : apply config 
              get                                   : show the current applied config 
        [options]
              --ServiceType                         : service type [ksanAgent|ksanOSD|ksanGW|ksanObjManager|
                                                      ksanLifecycleManager|ksanReplicationManager|ksanLogManager]
              --ConfVerId                           : specific config version id
                                                      'last' value scpecifies the latest config version id 
              --ConfFile                            : save current config to file or add config from file 
       [example]
              1. add config 
                # ./ksan config add --ServiceType ksanosd              
                # ./ksan config add --ServiceType ksanosd --ConfFile ksanosd.conf           
              2. remove config  
                # ./ksan config remove --ServiceType ksangw --ConfVerId 5  
              3. show config list    
                # ./ksan config list --ServiceType ksanosd   
                # ./ksan config list --ServiceType ksangw  
              4. set config 
                # ./ksan config set --ConfVerId 5 --ServiceType ksangw 
                # ./ksan config set --ConfVerId last --ServiceType ksangw 
              5. get config 
                # ./ksan config get --ServiceType ksanosd 
                # ./ksan config get --ServiceType ksanosd --ConfFile ksanosd.conf 
              """
        self.AddOption()
    def AddOption(self):
        self.add_option('-d', "--Debug", dest='debug', action='store_true')
        self.add_option("--ServiceType" , "--servicetype", dest="ServiceType", help='service type')
        self.add_option("--ConfVerId", "--ConfVerid", "--Confverid", "--confverid", dest="ConfigVersionId", help='config version id')
        self.add_option("--ConfFile", "--Conffile", "--conffile", dest="ConfFile", help='config file')

    def print_help(self):
        print(self.Usage)


class KsanDiskUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanDiskUtilOptParser, self).__init__()
        self.Usage = """
         ksan disk [add|remove|list|start|stop|set] [option]   
              add                                   : add disk   
              remove                                : remove disk
              list                                  : show disk info 
              start                                 : start disk 
              stop                                  : stop disk 
              set                                   : set disk read-only/read-write/maintenance mode

        [options]
              --ServerName                          : server name
              --DiskName                            : disk name 
              --DiskPath                            : disk mount path 
              --Mode                                : disk mode [ro|readonly|rw|readwrite|ma|maintenance]
              --v                                   : show info in detail 
              --vv                                  : show info in more detail
              --Continue                            : display info in every n seconds
              
        [example]
              1. add disk  
                # ./ksan disk add --DiskName disk1 --ServerName ksan_osd1 --DiskPath /OSD/DISK1             
                
              2. remove disk  
                # ./ksan disk remove --DiskName
                
              3. show disk list    
                # ./ksan disk list
                # ./ksan disk list --v
                # ./ksan disk list --vv
                # ./ksan disk list --v --Continue 1
                
              4. start/stop disk 
                # ./ksan disk start --DiskName disk1
                # ./ksan disk stop --DiskName disk1
                
              5. set disk mode 
                # ./ksan disk set --DiskName disk1 --Mode ro 
                # ./ksan disk set --DiskName disk2 --Mode rw
                # ./ksan disk set --DiskName disk2 --Mode ma


                """
        self.AddOption()
    def AddOption(self):
        self.add_option('-d', "--Debug", dest='debug', action='store_true')
        self.add_option("--ServerName", "--servername", dest="ServerName", help='server name')
        self.add_option("--DiskName", "--diskname", dest="DiskName", help='disk name')
        self.add_option("--DiskPath", "--diskpath", dest="DiskPath", help='osd disk\'s mount path')
        self.add_option("--Mode", "--mode", dest="Mode", help='disk mode')
        self.add_option("--V", "--v", dest="Detail", action="store_true", help='display information in detail')
        self.add_option("--VV", "--vv", dest="MoreDetail", action="store_true", help='display information in more detail')
        self.add_option("--Continue", "--continue", dest="Continue", type="int", help='display information continually in every n seconds')

    def print_help(self):
        print(self.Usage)

class KsanDiskpoolUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanDiskpoolUtilOptParser, self).__init__()
        self.Usage = """
        ksan diskpool [add|remove|list|add2disk|remove2disk|set] [option]*
              add                                   : add diskpool                 
              remove                                : remove diskpool 
              list                                  : show diskpool info 
              add2disk                              : add disk to diskpool
              remove2disk                           : remove disk from diskpool
              set                                   : set diskpool default diskpool
              get                                   : get diskpool default diskpool
              modify                                : modify diskpool's tolerance. ec is not supported

        [options]
              --DiskPoolName                        : diskpool name 
              --DiskName                            : disk name 
              --Tolerance                           : diskpool's fault tolerance [disable|replication|ec(k:m)]
                                                      ec(k:m): Erasure Code (the number of data chunks : the number of coding chunks)
              --DiskPoolType                        : diskpool type [normal|archive|performance]
              --DefaultDiskPool                     : system's default diskpool
              --v                                   : show info in detail 
              --Continue                            : show info in every n seconds
              
        [example]
              1. add diskpool   
                # ./ksan diskpool add --DiskPoolName diskpool1 --Tolerance replication --DiskPoolType normal
                # ./ksan diskpool add --DiskPoolName diskpool1 --Tolerance 'ec(6:2)' --DiskPoolType archive
                
              2. remove diskpool  
                # ./ksan diskpool remove --DiskPoolName diskpool1 
                
              3. show diskpool list    
                # ./ksan diskpool list
                # ./ksan diskpool list --v 
                # ./ksan diskpool list --v --Continue 1
                
              4. add disk to diskpool  
                # ./ksan diskpool add2disk --DiskPoolName diskpool1 --DiskName disk1  
                # ./ksan diskpool remove2disk --DiskPoolName diskpool1 --DiskName disk1              
                
              5. set/get diskpool default diskpool 
                # ./ksan diskpool set --:DefaultDiskPool --DiskPoolName diskpool1
                # ./ksan diskpool get --DefaultDiskPool
                
              6. modify diskpool's tolerance
                # ./ksan diskpool modify --DiskPoolName diskpool1 --Tolerance replication
                """
        self.AddOption()
    def AddOption(self):
        self.add_option('-d', "--Debug", "--debug", dest='debug', action='store_true')
        self.add_option("--DiskpoolName", "--DiskPoolName","--diskpoolname", dest="DiskpoolName", help='diskpool name')
        self.add_option("--DiskName", "--diskname", dest="DiskName", help='disk name')
        self.add_option("--Tolerance", "--tolerance", dest="RepType", help='replication type')
        self.add_option("--DiskpoolType", "--Diskpooltype","--DiskPoolType", "--diskpooltype", dest="DiskpoolType", help='diskpool type')
        self.add_option("--DefaultDiskPool", "--DefaultdiskPool", "--defaultdiskpool", "--DefaultDiskpool", dest="DefaultDiskpool", action="store_true", help='user\'s default diskpool')
        self.add_option("--V", "--v", dest="Detail", action="store_true", help='show information in detail')
        self.add_option("--Continue", "--continue", dest="Continue", type="int", help='show information continually in every n seconds')

    def print_help(self):
        print(self.Usage)

class KsanUserUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanUserUtilOptParser, self).__init__()
        self.Usage = """
        ksan user [add|remove|list|add2storageclass|remove2storageclass] [option]*
              add                                   : add user   
              remove                                : remove user 
              list                                  : show user info 
              add2storageclass                     : add storage class to user 
              remove2storageclass                  : remove storage class from user 
              set                                   : change user email address 
              
        [options]     
              --UserName                            : user name 
              --DiskPoolName                        : diskpool name 
              --DefaultDiskPool                     : user's default diskpool 
              --StorageClass                        : user-defined storage class for s3-compatible                                                     
              --Email                               : user's Email 
              --v                                   : show info in detail 
              
        [example]
              1. add user    
                # ./ksan user add --UserName user1 --Email user1@pspace.co.kr --DefaultDiskPool diskpool1
                # ./ksan user add --UserName user1 --Email user1@pspace.co.kr 
                
              2. remove user   
                # ./ksan user remove --UserName user1 
                
              3. show user list    
                # ./ksan user list
                # ./ksan user list --v 
              
              4. add/remove storage class to user 
                # ./ksan user add2storageclass --UserName user1 --DiskPoolName diskpool1 --StorageClass classname 
                # ./ksan user remove2storageclass --UserName user1 --DiskPoolName diskpool1 --StorageClass classname 
                
              5. change user's email address 
                # ./ksan user set --UserName user1 --Email user1@pspace.com
                """

        self.AddOption()
    def AddOption(self):
        self.add_option('-d', "--Debug", dest='debug', action='store_true')
        self.add_option("--UserId", "--userid", dest="UserId", help='user id')
        self.add_option("--UserName", "--username", dest="UserName", help='user name')
        self.add_option("--DiskpoolName", "--DiskPoolName","--diskpoolname", dest="DiskpoolName", help='diskpool name')
        self.add_option("--DefaultDiskpool", "--DefaultDiskPool", "--defaultdiskpool", dest="DefaultDiskpool", help='user\'s default diskpool')
        self.add_option("--StorageClass", "--storageclass", dest="StorageClass", help='user\'s storage class')
        self.add_option("--Email", "--email", dest="Email", help='user\' e-mail address')
        self.add_option("--V", "--v", dest="Detail", action="store_true", help='display information in detail')

    def print_help(self):
        print(self.Usage)


class KsanFsckUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanFsckUtilOptParser, self).__init__()
        self.Usage = """
        ksan fsck [option]*

        [options]     
              --BucketName                            : specify the name of the bucket you wish to fix or check 
              --DiskName                              : specify the disk name you wish to fix or check 
              --CheckOnly                             : specify if you wish only to check not to fix 
              --Debug                                 : enable display debug log

        [example]
              ksan fsck --BucketName bucket1 
              ksan fsck --BucketName bucket1 --CheckOnly 
              ksan fsck --DiskName osd2_disk1 
              ksan fsck --DiskName osd2_disk1 --CheckOnly 
                """

        self.AddOption()

    def AddOption(self):
        self.add_option("--BucketName", "--Bucketname", "--bucketname", dest="BucketName", help='bucket name')
        self.add_option("--DiskName", "--Diskname", "--diskname", dest="DiskName", help='disk name')
        self.add_option("--CheckOnly", "--Checkonly", "--checkonly", dest="CheckOnly", action='store_true', help='check only mode')
        self.add_option('--Debug', "--debug", dest='debug', action='store_true', help='display debug log')

    def print_help(self):
        print(self.Usage)


class KsanGetAttrUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanGetAttrUtilOptParser, self).__init__()
        self.Usage = """
        ksan getattr [BucketName] [option]*

        [options]     
              --Checksum                              : display the checksum and size of the object from ksanOSD 
              --KeyName                               : specify the object key
              --ObjId                                 : specify the object Id if you with to display with Id rather than object key
              --VersionId                             : specify the object version Id if you wish particular version of an object

        [example]
              ksan getattr bucket1 --KeyName file1.txt 
              ksan getattr bucket1 --KeyName file1.txt --Checksum 
              ksan getattr bucket1 --KeyName file1.txt --VersionId 526554498818254 
              ksan getattr bucket1 --ObjId bd01856bfd2065d0d1ee20c03bd3a9af 
              ksan getattr bucket1 --ObjId bd01856bfd2065d0d1ee20c03bd3a9af --VersionId 526554498818254 

                """

        self.AddOption()

    def AddOption(self):
        #self.add_option("--BucketName", "--bucketname", dest="BucketName", help='bucket name')
        self.add_option("--Checksum", "--checksum", action='store_true', dest="Checksum", help='display checksum and size of the object from ksanOSD')
        self.add_option("--KeyName", "--Keyname", "--keyname", dest="Key", help='object key')
        self.add_option("--ObjId", "--Objid", "--objid", dest="ObjectId", help='object id')
        self.add_option("--VersionId", "--Versionid", "--versionid", dest="VersionId", help='version id')
        self.add_option('--Debug', "--debug", dest='debug', action='store_true', help='display debug log')

    def print_help(self):
        print(self.Usage)


class KsanCbalanceUtilOptParser(OptionParser):
    def __init__(self):
        super(KsanCbalanceUtilOptParser, self).__init__()
        self.Usage = """
        ksan cbalance [option]*

        [options]     
              --BucketName                            : specify the name of the bucket you wish to balance 
              --KeyName                               : specify the object key
              --DstDiskName                           : specify the destination disk name
              --EmptyDisk                             : set to enable empty disk operation
              --ObjId                                 : specify the object Id instead of object key
              --OkLocalMove                           : allow to move to local another disk (default: false)
              --Size                                  : specify the capacity to move in KB/KiB, MB/MiB, GB/GiB, TB/TiB, and PB/PiB units
              --SrcDiskName                           : specify the source disk Name
              --VersionId                             : specify the object version Id if you wish particular version of an object
              --Debug                                 : display debug log to the terminal (default: false)


        [example]
              1. move a single object and the object can be idetified either key or object Id
                ksan cbalance --BucketName bucket1 --KeyName file1.txt --SrcDiskName osd1_disk1 
                ksan cbalance --BucketName bucket1 --KeyName file1.txt --VersionId 526554498818254 --SrcDiskName osd1_disk1 
                ksan cbalance --BucketName bucket1 --ObjId bd01856bfd2065d0d1ee20c03bd3a9af --VersionId 526554498818254 --SrcDiskName osd1_disk1 
                ksan cbalance --BucketName bucket1 --ObjId bd01856bfd2065d0d1ee20c03bd3a9af --SrcDiskName osd1_disk1 
                ksan cbalance --BucketName bucket1 --KeyName file1.txt --DstDiskName osd2_disk2
                ksan cbalance --BucketName bucket1 --KeyName file1.txt --VersionId 526554498818254 --DstDiskName osd3_disk2

              2. move a spefic amount of object from one disk to others
                ksan cbalance --SrcDiskName osd1_disk1  --DstDiskName osd2_disk2 --Size 2GB 
                ksan cbalance --SrcDiskName osd1_disk1 --Size 2GB 

              3. empty a disk
                ksan cbalance --EmptyDisk --SrcDiskName osd1_disk1 
                """

        self.AddOption()

    def AddOption(self):
        self.add_option("--BucketName", "--bucketname", dest="BucketName", help='specify the name of thebucket')
        self.add_option("--KeyName", "--keyname", "--Keyname", dest="Key", help='specify the object key')
        self.add_option("--VersionId", "--Versionid", "--versionid", dest="VersionId", help='specify the object version Id if you wish particular version of an object')
        self.add_option("--DstDiskName", "--Dstdiskname", "--dstdiskname", dest="DstDiskName", help='specify the destination diskName')
        self.add_option("--EmptyDisk", "--Emptydisk", "--emptydisk", dest="EmptyDisk", action='store_true', help='set to enable empty disk operation')
        self.add_option("--ObjId", "--objid", "--Objid", dest="ObjId", help='specify the object Id instead of object key')
        self.add_option("--OkLocalMove", "--oklocalmove", "--OkLocalmove", dest="OkLocalMove", help='allow to move to local an other disk(default:false)')
        self.add_option("--Size", "--size", dest="Size", help='specify the capacity to move in KB/KiB, MB/MiB, GB/GiB, TB/TiB, and PB/PiB units')
        self.add_option("--SrcDiskName", "--SrcDiskname", "--srcdiskname", dest="SrcDiskName", help='specify the source diskName')
        self.add_option("--Debug", "--debug", dest="debug", help='display debug log to the terminal')

    def print_help(self):
        print(self.Usage)



ValidManiArgument = ['sysinfo', 'server', 'service', 'config', 'disk', 'diskpool', 'user', 'fsck', 'getattr', 'cbalance']

def GetPortalConf(Force=False):
    ret, conf = GetConf(MonServicedConfPath)
    if ret is False and Force is False:
        print('Check if %s is configured' % MonServicedConfPath)
        sys.exit(-1)
    return conf

def SysInfo(Parser):
    Conf = WaitAgentConfComplete(KsanUtilName, logger)
    conf = GetAgentConfig(Conf)

    PortalIp = conf.PortalHost
    PortalPort = int(conf.PortalPort)
    PortalApiKey = conf.PortalApiKey

    options, args = Parser.parse_args()
    ShowSystemInfo(PortalIp, PortalPort, PortalApiKey, logger, Detail=options.Detail)

    """
    AllServersDetail = list()
    Res, Errmsg, Ret, AllServers = GetServerInfo(PortalIp, PortalPort, PortalApiKey)
    if Res != ResOk:
        print(Errmsg)
        return AllServersDetail

    for Svr in AllServers:
        Res, Errmsg, Ret, ServerDetail = GetServerInfo(PortalIp, PortalPort, PortalApiKey, ServerId=Svr.Id)
        if Res != ResOk:
            print(Errmsg)
        else:
            AllServersDetail.append(ServerDetail)

    ShowSysInfo(AllServersDetail)
    """

if __name__ == '__main__':
    AvoidSigInt()
    args = sys.argv
    if len(args) == 1:
        Parser = KsanOptionParser()
    else:
        if args[1].lower() == 'sysinfo':
            Parser = KsanSysinfoUtilOptParser()
        elif args[1].lower() == 'server':
            Parser = KsanServerUtilOptParser()
        elif args[1].lower() == 'service':
            Parser = KsanServiceUtilOptParser()
        elif args[1].lower() == 'config':
            Parser = KsanConfigUtilOptParser()
        elif args[1].lower() == 'disk':
            Parser = KsanDiskUtilOptParser()
        elif args[1].lower() == 'diskpool':
            Parser = KsanDiskpoolUtilOptParser()
        elif args[1].lower() == 'user':
            Parser = KsanUserUtilOptParser()
        elif args[1].lower() == 'fsck':
            Parser = KsanFsckUtilOptParser()
        elif args[1].lower() == 'getattr':
            Parser = KsanGetAttrUtilOptParser()
        elif args[1].lower() == 'cbalance':
            Parser = KsanCbalanceUtilOptParser()
        else:
            Parser = KsanOptionParser()

    options, args = Parser.parse_args()
    #Parser, options, args = KsanUtilOptParser()
    if len(args) < 1:
        print(Parser.print_help())
        sys.exit(-1)

    main_argument = args[0]
    Action = None
    if len(args) == 2:
        Action = args[1]
    if main_argument.lower() not in ValidManiArgument:
        Parser.print_help()
        sys.exit(-1)
    else:

        if options.debug is True:
            logger = Logging(loglevel='debug')
        else:
            logger = Logging(loglevel='error')
        logger = logger.create()

        isGetConfForce = False
        if main_argument.lower() == 'server':
            isGetConfForce = True
        #Conf = GetPortalConf(Force=isGetConfForce)

            Conf = WaitAgentConfComplete(KsanUtilName, logger, CheckServerId=False)
        else:
            Conf = WaitAgentConfComplete(KsanUtilName, logger)
        conf = GetAgentConfig(Conf)

        # conversion portal host to ip
        ret, hostname, ip = GetHostInfo(conf.PortalHost)
        if ret is False:
            logger.error('Invalid PortalHost')
            sys.exit(-1)
        else:
            setattr(Conf, 'PortalHost', ip)

        if main_argument.lower() == 'sysinfo':
            SysInfo(Parser)
        elif main_argument.lower() == 'server':
            ServerUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'service':
            ServiceUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'config':
            ConfigUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'disk':
            DiskUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'diskpool':
            DiskpoolUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'user':
            UserUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'fsck':
            Action = 'fsck'
            FsckUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'getattr':
            Action = 'getattr'
            GetAttrUtilHandler(conf, Action, Parser, logger)
        elif main_argument.lower() == 'cbalance':
            Action = 'cbalance'
            CbalanceUtilHandler(conf, Action, Parser, logger)


